{"version":3,"sources":["IDXContext.js","index.js","App.jsx","Listing.jsx","useSuggestions.js","reportWebVitals.js"],"names":["IDXContext","React","createContext","displayName","ReactDOM","render","StrictMode","document","getElementById","useState","process","REACT_APP_CERAMIC_URL","ceramicURL","ceramic","useMemo","Ceramic","aliases","mïmis","defs","definitions","idx","IDX","threeIdConnect","ThreeIdConnect","setRedraw","connect","window","ethereum","request","method","addresses","address","authProvider","EthereumAuthProvider","did","DID","provider","getDidProvider","resolver","ThreeIdResolver","getResolver","authenticate","setDID","d","disconnect","undefined","Provider","value","ChakraProvider","text","onClick","colorScheme","Button","position","right","top","tagKey","colors","useContext","tags","setTags","elem","setElem","loading","setLoading","useSuggestions","suggestions","setSearch","file","useRef","toast","useToast","evt","raw","target","tag","trim","ctrlKey","shiftKey","key","set","title","description","status","duration","isClosable","writePath","length","add","s","path","string","term","ts","get","root","docs","url","content","Boolean","TileDocument","load","push","nonexistent","slice","reverse","backPath","create","controllers","id","family","schema","schemas","Mïmis","doc","unshift","toUrl","merge","node","update","useEffect","current","click","Input","type","ref","style","display","Stack","mr","InputGroup","maxW","m","mt","InputLeftAddon","children","borderWidth","textAlign","onChange","Wrap","justify","map","Tag","grow","variant","TagLabel","TagCloseButton","copy","splice","remove","autoFocus","onKeyPress","Box","align","Spinner","size","Text","Table","Thead","Tr","Th","Tbody","sug","i","Td","cursor","search","result","setResult","dereference","useCallback","nodes","Object","keys","filter","startsWith","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.1f3bfe3a.chunk.js","sourcesContent":["import React from 'react'\n\nexport const IDXContext = React.createContext(null)\nIDXContext.displayName = 'IDX'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect'\nimport { Button, ChakraProvider } from '@chakra-ui/react'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport React, { useMemo, useState } from 'react'\nimport { IDX } from '@ceramicstudio/idx'\nimport defs from './definitionIDs.json'\nimport Listing from './Listing'\nimport { IDXContext } from './IDXContext'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const [ceramicURL] = useState(\n    // process.env.REACT_APP_CERAMIC_URL ?? 'http://localhost:7007'\n    process.env.REACT_APP_CERAMIC_URL ?? 'https://ceramic-clay.3boxlabs.com'\n  )\n  const ceramic = useMemo(() => new Ceramic(ceramicURL), [ceramicURL])\n  const aliases = useMemo(() => ({ mïmis: defs.definitions.mïmis }), [])\n  const idx = useMemo(\n    () => new IDX({ ceramic, aliases }),\n    [aliases, ceramic]\n  )\n  const threeIdConnect = new ThreeIdConnect()\n  const setRedraw = useState(false)[1]\n\n  const connect = async () => {\n    const addresses = await (\n      window.ethereum.request({ method: 'eth_requestAccounts' })\n    )\n    const address = addresses[0]\n    const authProvider = (\n      new EthereumAuthProvider(window.ethereum, address)\n    )\n    await threeIdConnect.connect(authProvider)\n    const did = new DID({\n      provider: threeIdConnect.getDidProvider(),\n      resolver: ThreeIdResolver.getResolver(ceramic)\n    })\n    await did.authenticate()\n    ceramic.setDID(did)\n    setRedraw(d => !d) // force redraw\n  }\n  const disconnect = () => {\n    ceramic.setDID(undefined) // this doesn't work\n    setRedraw(d => !d) // force redraw\n  }\n\n  return (\n    <IDXContext.Provider value={idx}>\n      <ChakraProvider>\n        {(() => {\n          const [text, onClick, colorScheme] = (\n            idx.ceramic.did\n            ? ( ['Disconnect', disconnect, \"red\"] )\n            : ( ['Connect', connect, \"green\"] )\n          )\n          return (\n            <Button\n              position=\"fixed\"\n              right={5} top={5}\n              {...{ onClick, colorScheme }}\n            >\n              {text}\n            </Button>\n          )\n        })()}\n        <Listing/>\n      </ChakraProvider>\n    </IDXContext.Provider>\n  )\n}","import {\n  Box,\n  Button,\n  Input, InputGroup, InputLeftAddon, Spinner, Stack, Table, Tag, TagCloseButton, TagLabel,\n  Tbody, Td, Text, Th, Thead, Tr, useToast, Wrap,\n} from '@chakra-ui/react'\nimport { useContext, useEffect, useRef, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { useSuggestions } from './useSuggestions'\nimport { IDXContext } from './IDXContext'\nimport defs from './definitionIDs.json'\n\nlet tagKey = 0\n\nconst colors = [\n  \"gray\", \"red\", \"orange\", \"yellow\", \"green\",\n  \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\",\n]\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const idx = useContext(IDXContext)\n  const [tags, setTags] = useState([])\n  const [elem, setElem] = useState('')\n  const [did, setDID] = useState(\n    'did:3:kjzl6cwe1jw147zr02h32lkdp666opzg0kp0sibzvumtn0z4k1wdxb6yb7ix4ie'\n  )\n  const [loading, setLoading] = useState(true)\n  const [suggestions, setSearch] = useSuggestions({ did })\n  const file = useRef(null)\n  const toast = useToast()\n\n  const process = async (evt) => {\n    const raw = evt.target.value\n    const tag = raw.trim()\n\n    setLoading(true)\n\n    if(evt.ctrlKey && evt.shiftKey && evt.key === 'Enter') {\n      await idx.set('mïmis', {})\n      toast({\n        title: 'Reset File Paths.',\n        description: 'The filesystem has been cleared.',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      })\n      setLoading(false)\n    } else if(evt.ctrlKey && evt.key === 'Enter') {\n      await writePath(tags)\n      toast({\n        title: 'Created Path.',\n        description: `${tags[tags.length - 1]} has been added.`,\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      })\n      setLoading(false)\n    } else if(evt.key === 'Enter' && tag !== '') {\n      add(tag)\n    } else {\n      setElem(raw)\n      setSearch(s => ({ path: s.path, string: raw }))\n    }\n  }\n  const add = (term) => {\n    setLoading(true)\n    setTags(ts => {\n      const path = [...ts, term]\n      setSearch({ path, string: '' })\n      return path\n    })\n    setElem('')\n  }\n  const remove = (idx) => {\n    setLoading(true)\n    setTags((ts) => {\n      const copy = [...ts]\n      copy.splice(idx, 1)\n      setSearch({ path: copy, string: elem })\n      return copy\n    })\n  }\n  const writePath = async (path) => {\n    if(path.length === 0) return\n\n    if(!idx.ceramic.did) {\n      toast({\n        title: 'Connect to Ceramic.',\n        description: 'Creating paths requires connecting to the Ceramic network.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      })\n    } else {\n      let root = await idx.get('mïmis', did)\n      const docs = []\n      for(const elem of path) {\n        const url = root?.[elem] ?? root?.content?.[elem]\n        if(Boolean(url)) {\n          root = await TileDocument.load(idx.ceramic, url)\n          docs.push(root)\n        } else {\n          break\n        }\n      }\n\n      // For the part of the path that doesn't exist, work back\n      // from the leaf defining nodes.\n      const nonexistent = (\n        path.slice(docs.length, path.length).reverse()\n      )\n      const backPath = []\n      for(const elem of nonexistent) {\n        const doc = await TileDocument.create(\n          idx.ceramic,\n          { [elem]: backPath[0] ?? null },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backPath.unshift(doc.id.toUrl())\n      }\n      if(docs.length === 0) {\n        if(backPath.length > 0) {\n          idx.merge('mïmis', { [path[0]]: backPath[1] })\n        }\n      } else {\n        const doc = docs[docs.length - 1]\n        const node = {\n          ...doc.content,\n          [path[docs.length]]: backPath[1] ?? null,\n        }\n        await doc.update(node)\n      }\n    }\n  }\n  const upload = (evt) => {\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n  }\n\n  useEffect(() => {\n    setLoading(false)\n  }, [suggestions])\n\n  useEffect(() => {\n    if(idx?.ceramic?.did?.id) {\n      setDID(idx.ceramic.did.id)\n    }\n  }, [idx?.ceramic?.did?.id])\n\n  return (\n    <>\n      <Button\n        position=\"fixed\" top={20} right={10}\n        colorScheme=\"orange\"\n        onClick={() => file.current.click()}\n      >\n        ➕\n      </Button>\n      <Input type=\"file\" ref={file} style={{ display: 'none' }}/>\n      <Stack mr=\"10em\">\n        <InputGroup maxW=\"42rem\" m=\"auto\" mt={5}>\n          <InputLeftAddon children=\"DID\" title=\"Decentralized Identifier\" />\n          <Input\n            borderWidth={3} textAlign=\"center\"\n            value={did} onChange={evt => setDID(evt.target.value)}\n          />\n        </InputGroup>\n        <Wrap justify=\"center\" mt={5}>\n          {tags.map((tag, idx) => (\n            <Tag\n              grow={3}\n              key={++tagKey}\n              variant=\"solid\"\n              colorScheme={colors[idx % colors.length]}\n              title={tag}\n              mr={1}\n            >\n              <TagLabel>{tag}</TagLabel>\n              <TagCloseButton onClick={() => remove(idx)}/>\n            </Tag>\n          ))}\n          <Input\n            maxW=\"20rem\" borderWidth={3}\n            autoFocus grow={1}\n            onKeyPress={process}\n            value={elem}\n            onChange={process}\n          />\n        </Wrap>\n        {(() => {\n          if(loading) {\n            return (\n              <Box align=\"center\">\n                <Spinner size=\"xl\" colorScheme=\"blue\" m=\"auto\" mt={40}/>\n              </Box>\n            )\n          }\n          if(suggestions.length === 0) {\n            return (\n              <Text textAlign=\"center\">\n                No path completions found…\n              </Text>\n            )\n          }\n          return (\n            <Table>\n              <Thead><Tr>\n                <Th>Name</Th>\n              </Tr></Thead>\n              <Tbody>\n                {suggestions.map((sug, i) => (\n                  <Tr key={i}>\n                    <Td onClick={() => add(sug)} cursor=\"pointer\">\n                      {sug}\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          )\n        })()}\n      </Stack>\n    </>\n  )\n}","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { IDXContext } from './IDXContext'\n\nexport const useSuggestions = ({ did }) => {\n  const [search, setSearch] = useState({\n    path: [], string: ''\n  })\n  const idx = useContext(IDXContext)\n  const [result, setResult] = useState([])\n\n  const dereference = useCallback(async () => {\n    if(idx) {\n      let root = await idx.get('mïmis', did)\n      const nodes = root ? [root] : []\n      for(const elem of search.path) {\n        const url = root?.[elem]\n        if(Boolean(url)) {\n          root = (await TileDocument.load(idx.ceramic, url)).content\n          root && nodes.push(root)\n        } else {\n          break\n        }\n      }\n\n      let suggestions = []\n      if(nodes.length - 1 === search.path.length) {\n        suggestions = Object.keys(nodes[nodes.length - 1])\n        if(search.string !== '') {\n          suggestions = suggestions.filter(\n            s => s.startsWith(search.string)\n          )\n        }\n      }\n      setResult(suggestions)\n    }\n  }, [search, idx, did])\n  useEffect(() => dereference(), [dereference])\n\n  return [result, setSearch]\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n"],"sourceRoot":""}