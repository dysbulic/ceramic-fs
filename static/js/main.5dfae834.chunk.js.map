{"version":3,"sources":["IDXContext.js","useSuggestions.js","Listing.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["IDXContext","React","createContext","displayName","tagKey","colors","idx","useContext","useState","tags","setTags","elem","setElem","did","setDID","path","string","search","setSearch","result","setResult","dereference","useCallback","a","get","root","nodes","url","Boolean","TileDocument","load","ceramic","content","push","suggestions","length","Object","keys","filter","s","startsWith","useEffect","useSuggestions","toast","useToast","process","evt","raw","target","value","tag","trim","ctrlKey","shiftKey","key","set","title","description","status","duration","isClosable","writePath","add","term","ts","docs","nonexistent","slice","reverse","backPath","create","controllers","id","family","schema","defs","schemas","Mïmis","doc","unshift","toUrl","merge","node","update","mr","maxW","m","mt","children","borderWidth","textAlign","onChange","justify","map","grow","variant","colorScheme","onClick","copy","splice","remove","autoFocus","onKeyPress","sug","i","cursor","Ceramic","aliases","mïmis","definitions","IDX","setIDX","threeIdConnect","ThreeIdConnect","setRedraw","connect","window","ethereum","request","method","addresses","address","authProvider","EthereumAuthProvider","DID","provider","getDidProvider","resolver","ThreeIdResolver","getResolver","authenticate","d","disconnect","Provider","text","func","position","right","top","Listing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.5dfae834.chunk.js","sourcesContent":["import React from 'react'\n\nexport const IDXContext = React.createContext(null)\nIDXContext.displayName = 'IDX'\n","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { IDXContext } from './IDXContext'\n\nexport const useSuggestions = ({ did }) => {\n  const [search, setSearch] = useState({\n    path: [], string: ''\n  })\n  const idx = useContext(IDXContext)\n  const [result, setResult] = useState([])\n\n  const dereference = useCallback(async () => {\n    if(idx) {\n      let root = await idx.get('mïmis', did)\n      const nodes = root ? [root] : []\n      for(const elem of search.path) {\n        const url = root?.[elem]\n        if(Boolean(url)) {\n          root = (await TileDocument.load(idx.ceramic, url)).content\n          root && nodes.push(root)\n        } else {\n          break\n        }\n      }\n\n      let suggestions = []\n      if(nodes.length - 1 === search.path.length) {\n        suggestions = Object.keys(nodes[nodes.length - 1])\n        if(search.string !== '') {\n          suggestions = suggestions.filter(\n            s => s.startsWith(search.string)\n          )\n        }\n      }\n      setResult(suggestions)\n    }\n  }, [search, idx, did])\n  useEffect(() => dereference(), [dereference])\n\n  return [result, setSearch]\n}","import {\n  Input, InputGroup, InputLeftAddon, Stack, Table, Tag, TagCloseButton, TagLabel,\n  Tbody, Td, Text, Th, Thead, Tr, useToast, Wrap,\n} from '@chakra-ui/react'\nimport { useContext, useEffect, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { useSuggestions } from './useSuggestions'\nimport { IDXContext } from './IDXContext'\nimport defs from './definitionIDs.json'\n\nlet tagKey = 0\n\nconst colors = [\n  \"gray\", \"red\", \"orange\", \"yellow\", \"green\",\n  \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\",\n]\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const idx = useContext(IDXContext)\n  const [tags, setTags] = useState([])\n  const [elem, setElem] = useState('')\n  const [did, setDID] = useState(\n    'did:3:kjzl6cwe1jw147zr02h32lkdp666opzg0kp0sibzvumtn0z4k1wdxb6yb7ix4ie'\n  )\n  const [suggestions, setSearch] = useSuggestions({ did })\n  const toast = useToast()\n  const process = async (evt) => {\n    const raw = evt.target.value\n    const tag = raw.trim()\n    if(evt.ctrlKey && evt.shiftKey && evt.key === 'Enter') {\n      await idx.set('mïmis', {})\n      toast({\n        title: 'Reset File Paths.',\n        description: 'The filesystem has been cleared.',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      })\n    } else if(evt.ctrlKey && evt.key === 'Enter') {\n      await writePath(tags)\n      toast({\n        title: 'Created Path.',\n        description: `${tags[tags.length - 1]} has been added.`,\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      })\n    } else if(evt.key === 'Enter' && tag !== '') {\n      add(tag)\n    } else {\n      setElem(raw)\n      setSearch(s => ({ path: s.path, string: raw }))\n    }\n  }\n  const add = (term) => {\n    setTags(ts => {\n      const path = [...ts, term]\n      setSearch({ path, string: '' })\n      return path\n    })\n    setElem('')\n  }\n  const remove = (idx) => {\n    setTags((ts) => {\n      const copy = [...ts]\n      copy.splice(idx, 1)\n      setSearch({ path: copy, string: elem })\n      return copy\n    })\n  }\n  const writePath = async (path) => {\n    if(path.length === 0) return\n\n    if(!idx.ceramic.did) {\n      toast({\n        title: 'Connect to Ceramic.',\n        description: 'Creating paths requires connecting to the Ceramic network.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      })\n    } else {\n      let root = await idx.get('mïmis', did)\n      const docs = []\n      for(const elem of path) {\n        const url = root?.[elem] ?? root?.content?.[elem]\n        if(Boolean(url)) {\n          root = await TileDocument.load(idx.ceramic, url)\n          docs.push(root)\n        } else {\n          break\n        }\n      }\n\n      // For the part of the path that doesn't exist, work back\n      // from the leaf defining nodes.\n      const nonexistent = (\n        path.slice(docs.length, path.length).reverse()\n      )\n      const backPath = []\n      for(const elem of nonexistent) {\n        const doc = await TileDocument.create(\n          idx.ceramic,\n          { [elem]: backPath[0] ?? null },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backPath.unshift(doc.id.toUrl())\n      }\n      if(docs.length === 0) {\n        if(backPath.length > 0) {\n          idx.merge('mïmis', { [path[0]]: backPath[1] })\n        }\n      } else {\n        const doc = docs[docs.length - 1]\n        const node = {\n          ...doc.content,\n          [path[docs.length]]: backPath[1] ?? null,\n        }\n        await doc.update(node)\n      }\n    }\n  }\n\n  useEffect(() => {\n    if(idx?.ceramic?.did?.id) {\n      setDID(idx.ceramic.did.id)\n    }\n  }, [idx?.ceramic?.did?.id])\n\n  return (\n    <Stack mr=\"10em\">\n      <InputGroup maxW=\"42rem\" m=\"auto\" mt={5}>\n        <InputLeftAddon children=\"DID\" title=\"Decentralized Identifier\" />\n        <Input\n          borderWidth={3} textAlign=\"center\"\n          value={did} onChange={evt => setDID(evt.target.value)}\n        />\n      </InputGroup>\n      <Wrap justify=\"center\" mt={5}>\n        {tags.map((tag, idx) => (\n          <Tag\n            grow={3}\n            key={++tagKey}\n            variant=\"solid\"\n            colorScheme={colors[idx % colors.length]}\n            title={tag}\n            mr={1}\n          >\n            <TagLabel>{tag}</TagLabel>\n            <TagCloseButton onClick={() => remove(idx)}/>\n          </Tag>\n        ))}\n        <Input\n          maxW=\"20rem\" borderWidth={3}\n          autoFocus grow={1}\n          onKeyPress={process}\n          value={elem}\n          onChange={process}\n        />\n      </Wrap>\n      {(() => {\n        if(suggestions.length === 0) {\n          return (\n            <Text textAlign=\"center\">\n              No path completions found…\n            </Text>\n          )\n        }\n        return (\n          <Table>\n            <Thead><Tr>\n              <Th>Name</Th>\n            </Tr></Thead>\n            <Tbody>\n              {suggestions.map((sug, i) => (\n                <Tr key={i}>\n                  <Td onClick={() => add(sug)} cursor=\"pointer\">\n                    {sug}\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        )\n      })()}\n    </Stack>\n  )\n}","import { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect'\nimport { Button, ChakraProvider } from '@chakra-ui/react'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport React, { useState } from 'react'\nimport { IDX } from '@ceramicstudio/idx'\nimport defs from './definitionIDs.json'\nimport Listing from './Listing'\nimport { IDXContext } from './IDXContext'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const ceramic = new Ceramic('http://localhost:7007')\n  const aliases = { mïmis: defs.definitions.mïmis }\n  const [idx, setIDX] = useState(new IDX({ ceramic, aliases }))\n  const threeIdConnect = new ThreeIdConnect()\n  const [_, setRedraw] = useState(false)\n\n  const connect = async () => {\n    const addresses = await (\n      window.ethereum.request({ method: 'eth_requestAccounts' })\n    )\n    const address = addresses[0]\n    const authProvider = new EthereumAuthProvider(window.ethereum, address)\n    await threeIdConnect.connect(authProvider)\n    const did = new DID({\n      provider: threeIdConnect.getDidProvider(),\n      resolver: ThreeIdResolver.getResolver(ceramic)\n    })\n    await did.authenticate()\n    ceramic.setDID(did)\n    setRedraw(d => !d) // force redraw\n  }\n  const disconnect = () => {\n    setIDX(null)\n  }\n\n  return (\n    <IDXContext.Provider value={idx}>\n      <ChakraProvider>\n        {(() => {\n          const [text, func] = (\n            idx.ceramic.did\n            ? ( ['Disconnect', disconnect] )\n            : ( ['Connect', connect] ) \n          )\n          return (\n            <Button\n              position=\"fixed\"\n              right={5} top={5}\n              onClick={func}\n              title={idx.ceramic.did?.id}\n            >\n              {text}\n            </Button>\n          )\n        })()}\n        <Listing/>\n      </ChakraProvider>\n    </IDXContext.Provider>\n  )\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}