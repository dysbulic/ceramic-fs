{"version":3,"sources":["IDXContext.js","index.js","App.jsx","Listing.jsx","useSuggestions.js","octocat.svg","Settings.jsx","reportWebVitals.js"],"names":["IDXContext","React","createContext","displayName","ReactDOM","render","StrictMode","document","getElementById","useState","process","REACT_APP_CERAMIC_URI","ceramicURI","setCeramicURI","ceramic","useMemo","Ceramic","aliases","mïmis","defs","definitions","idx","IDX","addr","setAddr","loggingIn","setLoggingIn","threeIdConnect","ThreeIdConnect","myDID","setMyDID","connect","window","ethereum","request","method","addresses","address","authProvider","EthereumAuthProvider","did","DID","provider","getDidProvider","resolver","ThreeIdResolver","getResolver","authenticate","setDID","id","disconnect","useCallback","undefined","useEffect","on","Provider","value","ChakraProvider","text","onClick","colorScheme","Button","position","right","top","evt","title","isDisabled","tagKey","colors","useContext","tags","setTags","elem","setElem","params","URLSearchParams","location","search","get","loading","setLoading","selected","setSelected","useSuggestions","suggestions","setSearch","file","useRef","entry","REACT_APP_IPFS_URI","ipfsURI","setIPFSURI","ipfs","toast","useToast","useDisclosure","isOpen","onOpen","onClose","add","term","ts","path","string","remove","copy","slice","s","writePath","cid","filename","length","description","status","duration","isClosable","Error","urls","forward","url","root","push","Boolean","TileDocument","load","content","isIDX","found","nonexistent","Math","max","reverse","backward","create","toString","controllers","family","schema","schemas","Mïmis","leaf","toUrl","doc","unshift","merge","parent","child","existing","update","console","info","dispatch","raw","target","tag","trim","ctrlKey","shiftKey","key","confirm","alert","set","test","upload","files","name","progress","prog","added","split","ext","addEventListener","removeEventListener","Tooltip","hasArrow","label","current","click","Input","type","ref","style","display","onChange","fontSize","pt","finalFocusRef","Link","href","Image","src","octocat","boxSize","bottom","Box","mr","InputGroup","maxW","m","mt","InputLeftAddon","children","borderWidth","textAlign","InputRightAddon","Wrap","justify","map","Tag","grow","variant","TagLabel","TagCloseButton","UnorderedList","ListItem","autoFocus","onKeyDown","placeholder","align","Spinner","size","match","Object","chakra","data","w","h","Text","fontFamily","Table","Thead","Tr","Th","Tbody","sort","a","b","parseInt","localeCompare","sug","i","_hover","bg","Td","cursor","result","setResult","resolve","dereference","nodes","startsWith","keys","filter","includes","ipfsRef","setIPFS","setCeramic","close","Modal","initialFocusRef","ModalOverlay","ModalContent","as","onSubmit","preventDefault","ModalHeader","ModalCloseButton","ModalBody","pb","FormControl","FormLabel","ModalFooter","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.861768d7.chunk.js","sourcesContent":["import React from 'react'\n\nexport const IDXContext = React.createContext(null)\nIDXContext.displayName = 'IDX'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect'\nimport { Button, ChakraProvider } from '@chakra-ui/react'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { IDX } from '@ceramicstudio/idx'\nimport defs from './definitionIDs.json'\nimport Listing from './Listing'\nimport { IDXContext } from './IDXContext'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const [ceramicURI, setCeramicURI] = useState(\n    process.env.REACT_APP_CERAMIC_URI\n    ?? 'https://ceramic-clay.3boxlabs.com'\n  )\n  const ceramic = useMemo(\n    () => new Ceramic(ceramicURI), [ceramicURI]\n  )\n  const aliases = useMemo(\n    () => ({ mïmis: defs.definitions.mïmis }), []\n  )\n  const idx = useMemo(\n    () => new IDX({ ceramic, aliases }),\n    [aliases, ceramic]\n  )\n  const [addr, setAddr] = useState(null)\n  const [loggingIn, setLoggingIn] = useState(false)\n  const threeIdConnect = new ThreeIdConnect()\n  const [myDID, setMyDID] = useState(null)\n\n  const connect = async () => {\n    const addresses = await (\n      window.ethereum.request({ method: 'eth_requestAccounts' })\n    )\n    const address = addresses[0]\n    setAddr(address)\n    const authProvider = (\n      new EthereumAuthProvider(window.ethereum, address)\n    )\n    await threeIdConnect.connect(authProvider)\n    const did = new DID({\n      provider: threeIdConnect.getDidProvider(),\n      resolver: ThreeIdResolver.getResolver(ceramic)\n    })\n    await did.authenticate()\n    ceramic.setDID(did)\n    setMyDID(did.id)\n  }\n  const disconnect = useCallback(() => {\n    ceramic.setDID(undefined)\n    setMyDID(null)\n  }, [ceramic])\n\n  useEffect(() => {\n    window.ethereum.on('accountsChanged', disconnect)\n  }, [disconnect])\n\n  useEffect(\n    () => { setLoggingIn(false) },\n    [idx.ceramic.did],\n  )\n\n  return (\n    <IDXContext.Provider value={idx}>\n      <ChakraProvider>\n        {(() => {\n          const [text, onClick, colorScheme] = (\n            idx.ceramic.did\n            ? ( ['Disconnect', disconnect, 'red'] )\n            : ( ['Connect', connect, 'green'] )\n          )\n          return (\n            <Button\n              position=\"fixed\"\n              right={5} top={5}\n              {...{ colorScheme }}\n              onClick={(evt) => {\n                setLoggingIn(true)\n                onClick(evt)\n              }}\n              title={addr}\n              isDisabled={loggingIn}\n            >\n              {text}\n            </Button>\n          )\n        })()}\n        <Listing {...{ ceramicURI, setCeramicURI, myDID }}/>\n      </ChakraProvider>\n    </IDXContext.Provider>\n  )\n}","import {\n  Box, Button, Image, Input, InputGroup,\n  InputLeftAddon, InputRightAddon, Link, ListItem, Spinner, Table,\n  Tag, TagCloseButton, TagLabel, Tbody, Td,\n  Text, Th, Thead, Tooltip, Tr, UnorderedList, useDisclosure,\n  useToast, Wrap, chakra,\n} from '@chakra-ui/react'\nimport {\n  useCallback,\n  useContext, useEffect, useRef, useState\n} from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { useSuggestions } from './useSuggestions'\nimport { IDXContext } from './IDXContext'\nimport defs from './definitionIDs.json'\nimport octocat from './octocat.svg'\nimport Settings from './Settings'\n\nlet tagKey = 0\n\nconst colors = [\n  \"gray\", \"red\", \"orange\", \"yellow\", \"green\",\n  \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\",\n]\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({ ceramicURI, setCeramicURI, myDID }) => {\n  const idx = useContext(IDXContext)\n  const [tags, setTags] = useState([])\n  const [elem, setElem] = useState('')\n  const params = new URLSearchParams(window.location.search)\n  const [did, setDID] = useState(\n    params.get('did')\n    ?? 'did:3:bafyreifdypkct7falt5aqkeahfl552ktoxlyh7lmrf6pttlwnfseufh4fe'\n  )\n  const [loading, setLoading] = useState(true)\n  const [selected, setSelected] = useState(null)\n  const [suggestions, setSearch] = (\n    useSuggestions({ did, setLoading })\n  )\n  const file = useRef(null)\n  const entry = useRef(null)\n  const [ipfsURI, setIPFSURI] = useState(\n    process.env.REACT_APP_IPFS_URI ?? '/ip4/127.0.0.1/tcp/5001'\n  )\n  const ipfs = ipfsHttpClient(ipfsURI)\n  const toast = useToast()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const add = useCallback((term) => {\n    setLoading(true)\n    setTags(ts => {\n      const path = [...ts, term]\n      setSearch({ path, string: '' })\n      return path\n    })\n    setElem('')\n  }, [setSearch])\n  const remove = useCallback((idx) => {\n    setLoading(true)\n    setTags((ts) => {\n      const copy = [...ts].slice(0, idx)\n      setSearch({ path: copy, string: elem })\n      return copy\n    })\n  }, [elem, setSearch])\n  const text = useCallback((string) => {\n    setLoading(true)\n    setElem(string)\n    setSearch(s => ({ path: s.path, string }))\n  }, [setSearch])\n  const writePath = useCallback(async ({\n    path, cid = null, filename = null,\n  }) => {\n    if(path.length === 0) return\n\n    if(!idx.ceramic.did) {\n      toast({\n        title: 'Connect to Ceramic.',\n        description: 'Creating paths requires connecting to the Ceramic network.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      })\n      throw new Error('Not Connected')\n    } else {\n      const urls = []\n      const entry = await idx.get('mïmis', did)\n      let root = entry\n      const forward = []\n      const url = root?.[path[0]]\n      urls.push(url)\n      if(Boolean(url)) {\n        root = await TileDocument.load(idx.ceramic, url)\n      }\n      for(const elem of path.slice(1)) {\n        const url = root?.content?.[elem]\n        urls.push(url)\n        if(Boolean(url)) {\n          forward.push(root)\n          root = await TileDocument.load(idx.ceramic, url)\n        } else {\n          break\n        }\n      }\n\n      const isIDX = !entry?.[path[0]]\n      const found = isIDX ? 0 : forward.length + 1\n\n      // For the part of the path that doesn't exist, work back\n      // from the leaf defining nodes.\n      const nonexistent = (\n        path.slice(Math.max(1, found), path.length).reverse()\n      )\n      const backward = []\n\n      if(cid) {\n        if(!filename) throw new Error('Filename not set.')\n        const leaf = await TileDocument.create(\n          idx.ceramic,\n          { [filename]: `ipfs://${cid.toString()}` },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Content Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backward.push(leaf)\n      }\n\n      for(const elem of nonexistent) {\n        const doc = await TileDocument.create(\n          idx.ceramic,\n          { [elem]: backward[0]?.id.toUrl() ?? null },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Context Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backward.unshift(doc)\n      }\n\n      if(isIDX) { // this is a root entry\n        if(forward.length > 0) {\n          throw new Error(\"¿No Root, but Forward Walked?\")\n        }\n        await idx.merge('mïmis', {\n          [path[0]]: backward[0]?.id.toUrl() ?? null\n        })\n      } else if(backward.length > 0) {\n        if(forward.length === 0) {\n          forward.push({ content: entry })\n        }\n\n        const [parent] = forward.slice(-1)\n        const child = backward[0]\n        const existing = await TileDocument.load(\n          idx.ceramic, parent.content[path[found - 1]]\n        )\n\n        await existing.update({\n          ...existing.content,\n          ...child.content,\n        })\n      } else {\n        console.info('No Changes')\n      }\n    }\n  }, [did, idx, toast])\n  const dispatch = useCallback(async (evt) => {\n    const raw = evt.target.value\n    const tag = raw.trim()\n\n    if(evt.ctrlKey && evt.shiftKey && evt.key === 'Enter') {\n      if(window.confirm('Clear All Data‽')) {\n        if(!idx.ceramic.did) {\n          alert('¡Connect to Ceramic!')\n        } else {\n          await idx.set('mïmis', {})\n          toast({\n            title: 'Reset File Paths.',\n            description: 'The filesystem has been cleared.',\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          })\n        }\n      }\n    } else if(evt.ctrlKey && evt.key === 'Enter') {\n      console.info('Writing', tags)\n      try {\n        await writePath({ path: tags })\n        toast({\n          title: 'Created Path.',\n          description: `${tags[tags.length - 1]} has been added.`,\n          status: 'success',\n          duration: 5000,\n          isClosable: true,\n        })\n      } catch(e) {\n      } finally {\n      }\n    } else if(/^(Arrow)?Up$/.test(evt.key)) {\n      setSelected((s) => {\n        if(s === null || s > suggestions?.length || s < 0) {\n          return suggestions?.length - 1\n        }\n        return s - 1\n      })\n    } else if(/^(Arrow)?Down$/.test(evt.key)) {\n      setSelected((s) => {\n        if(s === null || s > suggestions?.length || s < 0) {\n          return 0\n        }\n        return s + 1\n      })\n    } else if(/^(Arrow)?Right$/.test(evt.key)) {\n      if(!loading && suggestions?.length === 1) {\n        if(elem === suggestions?.[0]) {\n          add(tag)\n        } else {\n          text(suggestions?.[0])\n        }\n      } else {\n        if(\n          selected !== null\n          && selected >= 0\n          && selected < suggestions?.length\n        ) {\n          text(suggestions?.[selected])\n        }\n      }\n    } else if(evt.key === 'Enter' && tag !== '') {\n      add(tag)\n    } else if(\n      (\n        evt.key === 'Backspace'\n        || /^(Arrow)?Left$/.test(evt.key)\n      )\n      && raw === ''\n    ) {\n      remove(tags.length - 1)\n    }\n  }, [add, elem, idx, loading, remove, selected, suggestions, tags, text, toast, writePath])\n  const update = (evt) => {\n    text(evt.target.value)\n  }\n  const upload = async (evt) => {\n    const files = evt.target.files\n    let name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    for(const file of files) {\n      const added = await ipfs.add(\n        file,\n        {\n          progress: (prog) => console.info(`received: ${prog}`)\n        }\n      )\n      const [ext] = name.split(/[./\\\\]/).slice(-1)\n      const filename = ext\n      // added.size\n      writePath({\n        path: tags, cid: added.cid, filename\n      })\n    }\n  }\n\n  // used to catch the effect of the useSuggestions hook\n  useEffect(() => {\n    setLoading(false)\n  }, [suggestions])\n\n  useEffect(() => {\n    window.addEventListener('keypress', dispatch, false)\n    return () => {\n      window.removeEventListener('keypress', dispatch, false)\n    }\n  }, [dispatch])\n\n  return (\n    <>\n      {idx.ceramic.did && (\n        <>\n          <Tooltip hasArrow label=\"Add A File\">\n            <Button\n              position=\"fixed\" top=\"25vh\" right={10}\n              colorScheme=\"orange\"\n              onClick={() => file.current.click()}\n            >\n              ➕\n            </Button>\n          </Tooltip>\n          <Input\n            type=\"file\" ref={file}\n            style={{ display: 'none' }}\n            onChange={upload}\n          />\n        </>\n      )}\n      <Tooltip hasArrow label=\"Settings\">\n        <Button\n          position=\"fixed\" top=\"50vh\" right={10}\n          colorScheme=\"teal\" fontSize={42} pt={1}\n          onClick={onOpen}\n        >\n          ⚙\n        </Button>\n      </Tooltip>\n      <Settings\n        {...{\n          isOpen, onClose,\n          ipfsURI, setIPFSURI,\n          ceramicURI, setCeramicURI,\n        }}\n        finalFocusRef={entry}\n      />\n      <Link href=\"//github.com/dysbulic/ceramic-fs/\">\n        <Tooltip hasArrow label=\"GitHub\">\n          <Image\n            src={octocat} position=\"fixed\"\n            boxSize=\"10vw\" bottom={0} right={6}\n          />\n        </Tooltip>\n      </Link>\n      <Box mr=\"10em\">\n        <InputGroup maxW=\"42rem\" m=\"auto\" mt={5}>\n          <InputLeftAddon\n            children=\"DID\"\n            title=\"Decentralized Identifier\"\n          />\n          <Input\n            borderWidth={3} textAlign=\"center\" value={did}\n            onChange={evt => setDID(evt.target.value)}\n          />\n          {myDID && (\n            <InputRightAddon\n              children=\"🡄\" title=\"Use Your DID\"\n              onClick={() => setDID(myDID)}\n            />\n          )}\n        </InputGroup>\n        <Wrap justify=\"center\" mt={5}>\n          {tags.map((tag, idx) => (\n            <Tag\n              grow={3} mr={1}\n              key={++tagKey}\n              variant=\"solid\"\n              colorScheme={colors[idx % colors.length]}\n              title={tag}\n              onClick={() => remove(idx + 1)}\n            >\n              <TagLabel>{tag}</TagLabel>\n              <TagCloseButton onClick={() => remove(idx)}/>\n            </Tag>\n          ))}\n          <Tooltip hasArrow label={\n            <UnorderedList>\n              <ListItem>Add text to search existing paths.</ListItem>\n              <ListItem>⏎ to add an element to the current path.</ListItem>\n              <ListItem>^⏎ to write a new path to the filesystem.</ListItem>\n              <ListItem>↑ &amp; ↓ to navigate the potential paths.</ListItem>\n              <ListItem>→ to select a path and → again to navigate.</ListItem>\n            </UnorderedList>\n          }>\n            <Input\n              maxW=\"21rem\" borderWidth={3}\n              autoFocus grow={1}\n              onKeyDown={dispatch}\n              value={elem} ref={entry}\n              onChange={update}\n              placeholder=\"Add Path Elements\"\n            />\n          </Tooltip>\n        </Wrap>\n        {(() => {\n          if(loading) {\n            return (\n              <Box align=\"center\">\n                <Spinner size=\"xl\" colorScheme=\"blue\" m=\"auto\" mt={40}/>\n              </Box>\n            )\n          }\n          // this is a hack & should be replaced\n          if(typeof suggestions === 'string') {\n            let url = suggestions\n            const match = (\n              url.match(/^(ip[fn]s):\\/\\/(.+)$/)\n            )\n            if(match) {\n              url = `http://ipfs.io/${match[1]}/${match[2]}`\n            }\n            const Object = chakra('object')\n            return <Object data={url} m=\"auto\" mt={5} w=\"75vw\" h=\"80vh\"/>\n          }\n          if(suggestions === null || suggestions?.length === 0) {\n            return (\n              <Box mt=\"30vh\">\n                <Text\n                  textAlign=\"center\"\n                  fontFamily=\"'Odibee Sans'\"\n                  fontSize={65}\n                >\n                  {(suggestions === null) ? (\n                    <>\n                      <q>{did}</q> is not a valid\n                      <acronym title=\"Decentralized Identifier\">\n                        DID\n                      </acronym>.\n                    </>\n                  ) : (\n                    <>No path completions found…</>\n                  )}\n                </Text>\n              </Box>\n            )\n          }\n          return (\n            <Table>\n              <Thead><Tr>\n                <Th>Name</Th>\n              </Tr></Thead>\n              <Tbody>\n                {suggestions\n                .sort((a, b) => {\n                  if(/^\\d+$/.test(a) && /^\\d+$/.test(b)) {\n                    return parseInt(a) - parseInt(b)\n                  }\n                  return a.localeCompare(b)\n                }).map((sug, i) => (\n                  <Tr\n                    key={i} _hover={{ bg: '#FFF70022' }}\n                    bg={i === selected ? '#0000FF22' : 'transparent'}\n                  >\n                    <Td onClick={() => add(sug)} cursor=\"pointer\">\n                      {sug}\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          )\n        })()}\n      </Box>\n    </>\n  )\n}","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { IDXContext } from './IDXContext'\n\nexport const useSuggestions = ({ did, setLoading }) => {\n  const [search, setSearch] = useState({\n    path: [], string: ''\n  })\n  const idx = useContext(IDXContext)\n  const [result, setResult] = useState([])\n  const resolve = useCallback(\n    (result) => {\n      setLoading(false)\n      setResult(result)\n    },\n    [setLoading],\n  )\n  const dereference = useCallback(async () => {\n    if(idx) {\n      try {\n        let root = await idx.get('mïmis', did)\n        const nodes = root ? [root] : []\n        for(const elem of search.path) {\n          const url = root?.[elem]\n\n          if(url?.startsWith('ceramic://')) {\n            root = (await\n              TileDocument.load(idx.ceramic, url)\n            ).content\n            root && nodes.push(root)\n          } else if(url?.startsWith('ipfs://')) {\n            resolve(url) // a leaf with content\n            return\n          } else {\n            break\n          }\n        }\n\n        let suggestions = []\n        if(nodes.length - 1 === search.path.length) {\n          suggestions = Object.keys(nodes[nodes.length - 1])\n          if(search.string !== '') {\n            suggestions = suggestions.filter(\n              s => s.includes(search.string)\n            )\n          }\n        }\n        resolve(suggestions)\n      } catch(err) { // invalid DID\n        resolve(null)\n      }\n    }\n  }, [idx, did, search.path, search.string, resolve])\n\n  useEffect(() => dereference(), [dereference])\n\n  return [result, setSearch]\n}","export default __webpack_public_path__ + \"static/media/octocat.6986f28e.svg\";","import {\n  Button, FormControl, FormLabel, Input,\n  Modal, ModalBody, ModalCloseButton,\n  ModalContent, ModalFooter, ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n  isOpen, onClose, finalFocusRef,\n  ipfsURI, setIPFSURI, ceramicURI, setCeramicURI,\n}) => {\n  const ipfsRef = React.useRef()\n  const [ipfs, setIPFS] = useState(ipfsURI)\n  const [ceramic, setCeramic] = useState(ceramicURI)\n  const close = () => { // reset the inputs if the user hits \"Cancel\"\n    setIPFS(ipfsURI)\n    setCeramic(ceramicURI)\n    onClose()\n  }\n  const save = () => {\n    setIPFSURI(ipfs)\n    setCeramicURI(ceramic)\n    onClose()\n  }\n\n  return (\n    <Modal\n      initialFocusRef={ipfsRef}\n      {...{ finalFocusRef }}\n      isOpen={isOpen}\n      onClose={close}\n    >\n      <ModalOverlay/>\n      <ModalContent\n        as=\"form\"\n        onSubmit={(evt) => {\n          evt.preventDefault()\n          save()\n        }}\n      >\n        <ModalHeader textAlign=\"center\">\n          Configure Your Endpoints\n        </ModalHeader>\n        <ModalCloseButton/>\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel>IPFS URI</FormLabel>\n            <Input\n              ref={ipfsRef} placeholder=\"IPFS URI\"\n              value={ipfs}\n              onChange={(evt) => setIPFS(evt.target.value)}\n            />\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel>Ceramic URI</FormLabel>\n            <Input\n              placeholder=\"Ceramic URI\" value={ceramic}\n              onChange={(evt) => setCeramic(evt.target.value)}\n            />\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            type=\"submit\"\n            colorScheme=\"blue\" mr={3}\n          >\n            Save\n          </Button>\n          <Button onClick={close}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n"],"sourceRoot":""}