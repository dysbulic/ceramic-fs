{"version":3,"sources":["IDXContext.js","index.js","App.jsx","Listing.jsx","useSuggestions.js","octocat.svg","Settings.jsx","reportWebVitals.js"],"names":["IDXContext","React","createContext","displayName","ReactDOM","render","StrictMode","document","getElementById","useState","process","REACT_APP_CERAMIC_URI","ceramicURI","setCeramicURI","ceramic","useMemo","Ceramic","aliases","mïmis","defs","definitions","idx","IDX","addr","setAddr","threeIdConnect","ThreeIdConnect","setRedraw","connect","window","ethereum","request","method","addresses","address","authProvider","EthereumAuthProvider","did","DID","provider","getDidProvider","resolver","ThreeIdResolver","getResolver","authenticate","setDID","d","disconnect","undefined","Provider","value","ChakraProvider","text","onClick","colorScheme","Button","position","right","top","title","tagKey","colors","useContext","tags","setTags","elem","setElem","loading","setLoading","useSuggestions","suggestions","setSearch","file","useRef","entry","REACT_APP_IPFS_URI","ipfsURI","setIPFSURI","ipfs","toast","useToast","useDisclosure","isOpen","onOpen","onClose","dispatch","evt","raw","target","tag","trim","ctrlKey","shiftKey","key","confirm","alert","set","description","status","duration","isClosable","writePath","path","length","test","add","s","string","term","ts","cid","filename","Error","urls","get","forward","url","root","push","Boolean","TileDocument","load","slice","content","isIDX","found","console","info","map","id","toUrl","nonexistent","Math","max","reverse","backward","create","controllers","family","schema","schemas","Mïmis","doc","unshift","table","name","f","b","pl","fl","merge","parent","child","pf","pf1","pid","pcon","ccon","exe","update","p","c","toString","commitId","cc","upload","files","progress","prog","added","ext","split","useEffect","current","click","Input","type","ref","style","display","onChange","fontSize","pt","finalFocusRef","Link","href","Image","src","octocat","boxSize","bottom","Box","mr","InputGroup","maxW","m","mt","InputLeftAddon","children","borderWidth","textAlign","Wrap","justify","Tag","grow","variant","TagLabel","TagCloseButton","copy","remove","autoFocus","onKeyDown","align","Spinner","size","Text","fontFamily","Table","Thead","Tr","Th","Tbody","sort","sug","i","_hover","bg","Td","cursor","search","result","setResult","dereference","useCallback","nodes","Object","keys","filter","includes","ipfsRef","setIPFS","setCeramic","Modal","initialFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","pb","FormControl","FormLabel","placeholder","ModalFooter","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.97ec8df7.chunk.js","sourcesContent":["import React from 'react'\n\nexport const IDXContext = React.createContext(null)\nIDXContext.displayName = 'IDX'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect'\nimport { Button, ChakraProvider } from '@chakra-ui/react'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport React, { useMemo, useState } from 'react'\nimport { IDX } from '@ceramicstudio/idx'\nimport defs from './definitionIDs.json'\nimport Listing from './Listing'\nimport { IDXContext } from './IDXContext'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const [ceramicURI, setCeramicURI] = useState(\n    // process.env.REACT_APP_CERAMIC_URL ?? 'http://localhost:7007'\n    process.env.REACT_APP_CERAMIC_URI ?? 'https://ceramic-clay.3boxlabs.com'\n  )\n  const ceramic = useMemo(() => new Ceramic(ceramicURI), [ceramicURI])\n  const aliases = useMemo(() => ({ mïmis: defs.definitions.mïmis }), [])\n  const idx = useMemo(\n    () => new IDX({ ceramic, aliases }),\n    [aliases, ceramic]\n  )\n  const [addr, setAddr] = useState(null)\n  const threeIdConnect = new ThreeIdConnect()\n  const setRedraw = useState(false)[1]\n\n  const connect = async () => {\n    const addresses = await (\n      window.ethereum.request({ method: 'eth_requestAccounts' })\n    )\n    const address = addresses[0]\n    setAddr(address)\n    const authProvider = (\n      new EthereumAuthProvider(window.ethereum, address)\n    )\n    await threeIdConnect.connect(authProvider)\n    const did = new DID({\n      provider: threeIdConnect.getDidProvider(),\n      resolver: ThreeIdResolver.getResolver(ceramic)\n    })\n    await did.authenticate()\n    ceramic.setDID(did)\n    setRedraw(d => !d) // force redraw\n  }\n  const disconnect = () => {\n    ceramic.setDID(undefined) // this doesn't work\n    setRedraw(d => !d) // force redraw\n  }\n\n  return (\n    <IDXContext.Provider value={idx}>\n      <ChakraProvider>\n        {(() => {\n          const [text, onClick, colorScheme] = (\n            idx.ceramic.did\n            ? ( ['Disconnect', disconnect, \"red\"] )\n            : ( ['Connect', connect, \"green\"] )\n          )\n          return (\n            <Button\n              position=\"fixed\"\n              right={5} top={5}\n              {...{ onClick, colorScheme }}\n              title={addr}\n            >\n              {text}\n            </Button>\n          )\n        })()}\n        <Listing {...{ ceramicURI, setCeramicURI }}/>\n      </ChakraProvider>\n    </IDXContext.Provider>\n  )\n}","import {\n  Box, Button, Image, Input, InputGroup,\n  InputLeftAddon, Link, Spinner, Table,\n  Tag, TagCloseButton, TagLabel, Tbody, Td,\n  Text, Th, Thead, Tr, useDisclosure,\n  useToast, Wrap,\n} from '@chakra-ui/react'\nimport {\n  useContext, useEffect, useRef, useState\n} from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { useSuggestions } from './useSuggestions'\nimport { IDXContext } from './IDXContext'\nimport defs from './definitionIDs.json'\nimport octocat from './octocat.svg'\nimport Settings from './Settings'\n\nlet tagKey = 0\n\nconst colors = [\n  \"gray\", \"red\", \"orange\", \"yellow\", \"green\",\n  \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\",\n]\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({ ceramicURI, setCeramicURI }) => {\n  const idx = useContext(IDXContext)\n  const [tags, setTags] = useState([])\n  const [elem, setElem] = useState('')\n  const [did, setDID] = useState(\n    'did:3:kjzl6cwe1jw147zr02h32lkdp666opzg0kp0sibzvumtn0z4k1wdxb6yb7ix4ie'\n  )\n  const [loading, setLoading] = useState(true)\n  const [suggestions, setSearch] = useSuggestions({ did })\n  const file = useRef(null)\n  const entry = useRef(null)\n  const [ipfsURI, setIPFSURI] = useState(\n    process.env.REACT_APP_IPFS_URI ?? '/ip4/127.0.0.1/tcp/5001'\n  )\n  const ipfs = ipfsHttpClient(ipfsURI)\n  const toast = useToast()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const dispatch = async (evt) => {\n    const raw = evt.target.value\n    const tag = raw.trim()\n\n    setLoading(true)\n\n    if(evt.ctrlKey && evt.shiftKey && evt.key === 'Enter') {\n      if(window.confirm('Clear All Data‽')) {\n        if(!idx.ceramic.did) {\n          alert('¡Connect to Ceramic!')\n        } else {\n          await idx.set('mïmis', {})\n          toast({\n            title: 'Reset File Paths.',\n            description: 'The filesystem has been cleared.',\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          })\n        }\n      }\n      setLoading(false)\n    } else if(evt.ctrlKey && evt.key === 'Enter') {\n      try {\n        await writePath({ path: tags })\n        toast({\n          title: 'Created Path.',\n          description: `${tags[tags.length - 1]} has been added.`,\n          status: 'success',\n          duration: 5000,\n          isClosable: true,\n        })\n      } catch(e) {\n      } finally {\n        setLoading(false)\n      }\n    } else if(/^(Arrow)?(Right|Up)$/.test(evt.key)) {\n      if(!loading && suggestions.length === 1) {\n        if(elem === suggestions[0]) {\n          add(tag)\n        } else {\n          setElem(suggestions[0])\n          setLoading(false)\n        }\n      }\n    } else if(evt.key === 'Enter' && tag !== '') {\n      add(tag)\n    } else if(!evt.key) { // onChange, could easily be a separate function\n      setElem(raw)\n      setSearch(s => ({ path: s.path, string: raw }))\n    }\n  }\n  const add = (term) => {\n    setLoading(true)\n    setTags(ts => {\n      const path = [...ts, term]\n      setSearch({ path, string: '' })\n      return path\n    })\n    setElem('')\n  }\n  const remove = (idx) => {\n    setLoading(true)\n    setTags((ts) => {\n      const copy = [...ts].slice(0, idx)\n      setSearch({ path: copy, string: elem })\n      return copy\n    })\n  }\n  const writePath = async ({\n    path, cid = null, filename = null,\n  }) => {\n    if(path.length === 0) return\n\n    if(!idx.ceramic.did) {\n      toast({\n        title: 'Connect to Ceramic.',\n        description: 'Creating paths requires connecting to the Ceramic network.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      })\n      throw new Error('Not Connected')\n    } else {\n      const urls = []\n      const entry = await idx.get('mïmis', did)\n      let root = entry\n      const forward = []\n      const url = root?.[path[0]]\n      urls.push(url)\n      if(Boolean(url)) {\n        root = await TileDocument.load(idx.ceramic, url)\n      }\n      for(const elem of path.slice(1)) {\n        const url = root?.content?.[elem]\n        urls.push(url)\n        if(Boolean(url)) {\n          forward.push(root)\n          root = await TileDocument.load(idx.ceramic, url)\n        } else {\n          break\n        }\n      }\n\n      const isIDX = !entry?.[path[0]]\n      const found = isIDX ? 0 : forward.length + 1\n\n      console.info('FWD', { path, urls, found }, forward.map(d => [d.id.toUrl(), d.content]))\n\n      // For the part of the path that doesn't exist, work back\n      // from the leaf defining nodes.\n      const nonexistent = (\n        path.slice(Math.max(1, found), path.length).reverse()\n      )\n      console.info('NON', nonexistent)\n      const backward = []\n      for(const elem of nonexistent) {\n        console.info(\"BKWRD\", { found, backward, elem })\n        const doc = await TileDocument.create(\n          idx.ceramic,\n          { [elem]: backward[0]?.id.toUrl() ?? null },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Context Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backward.unshift(doc)\n      }\n\n      console.table({\n        name: \"DCKS\",\n        f: forward.map(d => d.content),\n        b: backward.map(d => d.content),\n        found, path, pl: path.length,\n        fl: forward.length,\n      })\n\n      if(isIDX) { // this is a root entry\n        if(forward.length > 0) {\n          throw new Error(\"¿No Root, but Forward Walked?\")\n        }\n        console.info('ROOT', {\n          [path[0]]: backward[0]?.id.toUrl() ?? null\n        })\n        await idx.merge('mïmis', {\n          [path[0]]: backward[0]?.id.toUrl() ?? null\n        })\n      } else if(found < path.length) {\n        console.info('HERE')\n        const [parent] = forward.slice(-1)\n        const child = backward[0]\n        console.info('PF', path[found - 1])\n        const content = await TileDocument.load(\n          idx.ceramic, parent.content[path[found - 1]]\n        )\n        console.table({\n          pf: path[found],\n          pf1: path[found + 1],\n          name: 'CHAIN',\n          pid: parent.id.toUrl(),\n          pcon: parent.content,\n          cid: child.id.toUrl(),\n          ccon: child.content,\n          content: content.content,\n          exe: {\n            ...content.content,\n            ...child.content,\n          },\n        })\n        await content.update({\n          ...content.content,\n          ...child.content,\n        })\n        console.info('NEW', content.content)\n      } else {\n        console.info('No Changes')\n      }\n\n      if(cid) {\n        if(!filename) throw new Error('Filename not set.')\n        // const leaf = await TileDocument.create(\n        //   idx.ceramic,\n        //   { [filename]: `ipfs://${cid.toString()}` },\n        //   {\n        //     controllers: [idx.ceramic.did.id],\n        //     family: 'Mïmis Content Node',\n        //     schema: defs.schemas.Mïmis,\n        //   }\n        // )\n        let [parent] = backward.slice(-1)\n        parent = parent ?? forward.slice(-1)[0]\n        const content = await TileDocument.load(\n          idx.ceramic, parent[path.slice(-1)[0]]\n        )\n        console.table({\n          name: \"DOC\",\n          p: parent.content,\n          c: content.content,\n          exe: {\n            ...content.content,\n            [filename]: `ipfs://${cid.toString()}`,\n          }\n        })\n        await content.update({\n          ...content.content,\n          [filename]: `ipfs://${cid.toString()}`,\n        })\n        console.table({\n          p: parent.id.toUrl(),\n          c: parent.commitId.toUrl(),\n          cc: content.content,\n        })\n      }\n    }\n  }\n  const upload = async (evt) => {\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    for(const file of files) {\n      const added = await ipfs.add(\n        file,\n        {\n          progress: (prog) => console.info(`received: ${prog}`)\n        }\n      )\n      const ext = name.split('.').slice(-1)\n      const filename = `${ext}`\n      // added.size\n      writePath({\n        path: tags, cid: added.cid, filename\n      })\n    }\n  }\n\n  useEffect(() => {\n    setLoading(false)\n  }, [suggestions])\n\n  useEffect(() => {\n    if(idx?.ceramic?.did?.id) {\n      setDID(idx.ceramic.did.id)\n    }\n  }, [idx?.ceramic?.did?.id])\n\n  return (\n    <>\n      {idx.ceramic.did && (\n        <>\n          <Button\n            position=\"fixed\" top=\"25vh\" right=\"3vw\"\n            colorScheme=\"orange\"\n            onClick={() => file.current.click()}\n          >\n            ➕\n          </Button>\n          <Input\n            type=\"file\" ref={file}\n            style={{ display: 'none' }}\n            onChange={upload}\n          />\n        </>\n      )}\n      <Button\n        position=\"fixed\" top=\"50vh\" right=\"3vw\"\n        colorScheme=\"teal\" fontSize={42} pt={1}\n        onClick={onOpen}\n      >\n        ⚙\n      </Button>\n      <Settings\n        {...{\n          isOpen, onClose,\n          ipfsURI, setIPFSURI,\n          ceramicURI, setCeramicURI,\n        }}\n        finalFocusRef={entry}\n      />\n      <Link href=\"//github.com/dysbulic/ceramic-fs/\">\n        <Image\n          src={octocat} position=\"fixed\"\n          boxSize=\"5vw\" bottom={0} right={6}\n        />\n      </Link>\n      <Box mr=\"10em\">\n        <InputGroup maxW=\"42rem\" m=\"auto\" mt={5}>\n          <InputLeftAddon children=\"DID\" title=\"Decentralized Identifier\" />\n          <Input\n            borderWidth={3} textAlign=\"center\"\n            value={did} onChange={evt => setDID(evt.target.value)}\n          />\n        </InputGroup>\n        <Wrap justify=\"center\" mt={5}>\n          {tags.map((tag, idx) => (\n            <Tag\n              grow={3}\n              key={++tagKey}\n              variant=\"solid\"\n              colorScheme={colors[idx % colors.length]}\n              title={tag}\n              mr={1}\n            >\n              <TagLabel>{tag}</TagLabel>\n              <TagCloseButton onClick={() => remove(idx)}/>\n            </Tag>\n          ))}\n          <Input\n            maxW=\"20rem\" borderWidth={3}\n            autoFocus grow={1}\n            onKeyDown={dispatch}\n            value={elem} ref={entry}\n            onChange={dispatch}\n          />\n        </Wrap>\n        {(() => {\n          if(loading) {\n            return (\n              <Box align=\"center\">\n                <Spinner size=\"xl\" colorScheme=\"blue\" m=\"auto\" mt={40}/>\n              </Box>\n            )\n          }\n          if(suggestions.length === 0) {\n            return (\n              <Box mt=\"30vh\">\n                <Text\n                  textAlign=\"center\"\n                  fontFamily=\"'Odibee Sans'\"\n                  fontSize={65}\n                >\n                  No path completions found…\n                </Text>\n              </Box>\n            )\n          }\n          return (\n            <Table>\n              <Thead><Tr>\n                <Th>Name</Th>\n              </Tr></Thead>\n              <Tbody>\n                {suggestions.sort().map((sug, i) => (\n                  <Tr key={i} _hover={{ bg: '#FFF70022' }}>\n                    <Td onClick={() => add(sug)} cursor=\"pointer\">\n                      {sug}\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          )\n        })()}\n      </Box>\n    </>\n  )\n}","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { IDXContext } from './IDXContext'\n\nexport const useSuggestions = ({ did }) => {\n  const [search, setSearch] = useState({\n    path: [], string: ''\n  })\n  const idx = useContext(IDXContext)\n  const [result, setResult] = useState([])\n\n  const dereference = useCallback(async () => {\n    if(idx) {\n      let root = await idx.get('mïmis', did)\n      const nodes = root ? [root] : []\n      for(const elem of search.path) {\n        const url = root?.[elem]\n        if(Boolean(url)) {\n          root = (await TileDocument.load(idx.ceramic, url)).content\n          root && nodes.push(root)\n        } else {\n          break\n        }\n      }\n\n      let suggestions = []\n      if(nodes.length - 1 === search.path.length) {\n        suggestions = Object.keys(nodes[nodes.length - 1])\n        if(search.string !== '') {\n          suggestions = suggestions.filter(\n            s => s.includes(search.string)\n          )\n        }\n      }\n      setResult(suggestions)\n    }\n  }, [search, idx, did])\n  useEffect(() => dereference(), [dereference])\n\n  return [result, setSearch]\n}","export default __webpack_public_path__ + \"static/media/octocat.6986f28e.svg\";","import {\n  Button, FormControl, FormLabel, Input,\n  Modal, ModalBody, ModalCloseButton,\n  ModalContent, ModalFooter, ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n  isOpen, onClose, finalFocusRef,\n  ipfsURI, setIPFSURI, ceramicURI, setCeramicURI,\n}) => {\n  const ipfsRef = React.useRef()\n  const [ipfs, setIPFS] = useState(ipfsURI)\n  const [ceramic, setCeramic] = useState(ceramicURI)\n\n  return (\n    <>\n      <Modal\n        initialFocusRef={ipfsRef}\n        {...{ finalFocusRef }}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay/>\n        <ModalContent>\n          <ModalHeader textAlign=\"center\">\n            Configure Your Endpoints\n          </ModalHeader>\n          <ModalCloseButton/>\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>IPFS URI</FormLabel>\n              <Input\n                ref={ipfsRef} placeholder=\"IPFS URI\"\n                value={ipfs}\n                onChange={(evt) => setIPFS(evt.target.value)}\n              />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Ceramic URI</FormLabel>\n              <Input\n                placeholder=\"Ceramic URI\" value={ceramic}\n                onChange={(evt) => setCeramic(evt.target.value)}\n              />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              colorScheme=\"blue\" mr={3}\n              onClick={() => {\n                setIPFSURI(ipfs)\n                setCeramicURI(ceramic)\n                onClose()\n              }}\n            >\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n"],"sourceRoot":""}