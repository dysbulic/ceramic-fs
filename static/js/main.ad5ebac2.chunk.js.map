{"version":3,"sources":["IDXContext.js","index.js","App.jsx","Listing.jsx","useSuggestions.js","octocat.svg","Settings.jsx","reportWebVitals.js"],"names":["IDXContext","React","createContext","displayName","ReactDOM","render","StrictMode","document","getElementById","useState","process","REACT_APP_CERAMIC_URI","ceramicURI","setCeramicURI","ceramic","useMemo","Ceramic","aliases","mïmis","defs","definitions","idx","IDX","addr","setAddr","loggingIn","setLoggingIn","threeIdConnect","ThreeIdConnect","setRedraw","connect","window","ethereum","request","method","addresses","address","authProvider","EthereumAuthProvider","did","DID","provider","getDidProvider","resolver","ThreeIdResolver","getResolver","authenticate","setDID","d","disconnect","undefined","useEffect","Provider","value","ChakraProvider","text","onClick","colorScheme","Button","position","right","top","evt","title","isDisabled","tagKey","colors","useContext","tags","setTags","elem","setElem","loading","setLoading","useSuggestions","suggestions","setSearch","file","useRef","entry","REACT_APP_IPFS_URI","ipfsURI","setIPFSURI","ipfs","toast","useToast","useDisclosure","isOpen","onOpen","onClose","dispatch","raw","target","tag","trim","ctrlKey","shiftKey","key","confirm","alert","set","description","status","duration","isClosable","writePath","path","length","test","add","remove","s","string","term","ts","copy","slice","cid","filename","Error","urls","get","forward","url","root","push","Boolean","TileDocument","load","content","isIDX","found","nonexistent","Math","max","reverse","backward","create","toString","controllers","id","family","schema","schemas","Mïmis","leaf","toUrl","doc","unshift","merge","parent","child","update","console","info","upload","files","name","progress","prog","added","split","ext","Tooltip","hasArrow","label","current","click","Input","type","ref","style","display","onChange","fontSize","pt","finalFocusRef","Link","href","Image","src","octocat","boxSize","bottom","Box","mr","InputGroup","maxW","m","mt","InputLeftAddon","children","borderWidth","textAlign","Wrap","justify","map","Tag","grow","variant","TagLabel","TagCloseButton","autoFocus","onKeyDown","placeholder","align","Spinner","size","match","maxH","Text","fontFamily","Table","Thead","Tr","Th","Tbody","sort","sug","i","_hover","bg","Td","cursor","search","result","setResult","dereference","useCallback","nodes","startsWith","Object","keys","filter","includes","ipfsRef","setIPFS","setCeramic","Modal","initialFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","pb","FormControl","FormLabel","ModalFooter","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"kNAAA,IAEaA,EAFb,QAE0BC,QAAMC,cAAc,M,eAC9CF,EAAWG,YAAc,O,qSCHzB,UACA,YACA,YACA,Y,SAEAC,UAASC,QACP,SAAC,UAAMC,WAAP,WACE,SAAC,UAAD,MAEFC,SAASC,eAAe,UAM1B,gB,6JCfA,SACA,SACA,YACA,YACA,SACA,UACA,SACA,YACA,YACA,S,mBAGe,WAAO,IAAD,KACiB,IAAAC,UAAA,UAElCC,8IAAYC,6BAFsB,QAEG,qCAHpB,qBACZC,EADY,KACAC,EADA,KAKbC,GAAU,IAAAC,UAAQ,kBAAM,IAAIC,UAAQJ,KAAa,CAACA,IAClDK,GAAU,IAAAF,UAAQ,iBAAO,CAAEG,WAAOC,UAAKC,YAAYF,cAAU,IAC7DG,GAAM,IAAAN,UACV,kBAAM,IAAIO,MAAI,CAAER,UAASG,cACzB,CAACA,EAASH,IATO,GAWK,IAAAL,UAAS,MAXd,qBAWZc,EAXY,KAWNC,EAXM,QAYe,IAAAf,WAAS,GAZxB,qBAYZgB,EAZY,KAYDC,EAZC,KAabC,EAAiB,IAAIC,iBACrBC,GAAY,IAAApB,WAAS,GAAO,GAE5BqB,EAAO,+CAAG,gHAEZC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBAFtB,cACRC,EADQ,OAIRC,EAAUD,EAAU,GAC1BX,EAAQY,GACFC,EACJ,IAAIC,uBAAqBP,OAAOC,SAAUI,GAP9B,SASRT,EAAeG,QAAQO,GATf,cAURE,EAAM,IAAIC,MAAI,CAClBC,SAAUd,EAAee,iBACzBC,SAAUC,UAAgBC,YAAY/B,KAZ1B,UAcRyB,EAAIO,eAdI,QAedhC,EAAQiC,OAAOR,GACfV,GAAU,SAAAmB,GAAC,OAAKA,KAhBF,4CAAH,qDAkBPC,EAAa,WACjBnC,EAAQiC,YAAOG,GACfrB,GAAU,SAAAmB,GAAC,OAAKA,MAQlB,OALA,IAAAG,YACE,WAAQzB,GAAa,KACrB,CAACL,EAAIP,QAAQyB,OAIb,SAAC,EAAAvC,WAAWoD,SAAZ,CAAqBC,MAAOhC,EAA5B,UACE,UAAC,EAAAiC,eAAD,WACI,WAAO,IAAD,EAEJjC,EAAIP,QAAQyB,IACR,CAAC,aAAcU,EAAY,OAC3B,CAAC,UAAWnB,EAAS,SAJrB,qBACCyB,EADD,KACOC,EADP,KACgBC,EADhB,KAMN,OACE,SAAC,EAAAC,OAAD,CACEC,SAAS,QACTC,MAAO,EAAGC,IAAK,EACTJ,cACND,QAAS,SAACM,GACRpC,GAAa,GACb8B,EAAQM,IAEVC,MAAOxC,EACPyC,WAAYvC,EATd,SAWG8B,IAlBL,IAsBF,SAAC,UAAD,CAAe3C,aAAYC,yB,8PCjFnC,SAOA,OAGA,SACA,SACA,SACA,SACA,Y,YAEA,Y,SAEIoD,EAAS,EAEPC,EAAS,CACb,OAAQ,MAAO,SAAU,SAAU,QACnC,OAAQ,OAAQ,OAAQ,SAAU,Q,UAIrB,YAAoC,IAAD,MAAhCtD,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACtBQ,GAAM,IAAA8C,YAAWnE,cADyB,GAExB,IAAAS,UAAS,IAFe,qBAEzC2D,EAFyC,KAEnCC,EAFmC,QAGxB,IAAA5D,UAAS,IAHe,qBAGzC6D,EAHyC,KAGnCC,EAHmC,QAI1B,IAAA9D,UACpB,qEAL8C,qBAIzC8B,EAJyC,KAIpCQ,EAJoC,QAOlB,IAAAtC,WAAS,GAPS,qBAOzC+D,EAPyC,KAOhCC,EAPgC,QAQf,IAAAC,gBAAe,CAAEnC,QARF,qBAQzCoC,EARyC,KAQ5BC,EAR4B,KAS1CC,GAAO,IAAAC,QAAO,MACdC,GAAQ,IAAAD,QAAO,MAV2B,GAWlB,IAAArE,UAAA,UAC5BC,8IAAYsE,0BADgB,QACM,2BAZY,qBAWzCC,EAXyC,KAWhCC,EAXgC,KAc1CC,GAAO,YAAeF,GACtBG,GAAQ,IAAAC,YAfkC,IAgBZ,IAAAC,iBAA5BC,GAhBwC,GAgBxCA,OAAQC,GAhBgC,GAgBhCA,OAAQC,GAhBwB,GAgBxBA,QAElBC,GAAQ,+CAAG,WAAO5B,GAAP,kFACT6B,EAAM7B,EAAI8B,OAAOvC,MACjBwC,EAAMF,EAAIG,OAEhBrB,GAAW,IAERX,EAAIiC,UAAWjC,EAAIkC,UAAwB,UAAZlC,EAAImC,IANvB,qBAOVlE,OAAOmE,QAAQ,wBAPL,oBAQP7E,EAAIP,QAAQyB,IARL,gBAST4D,MAAM,2BATG,wCAWH9E,EAAI+E,IAAI,WAAS,IAXd,QAYThB,EAAM,CACJrB,MAAO,oBACPsC,YAAa,mCACbC,OAAQ,UACRC,SAAU,IACVC,YAAY,IAjBL,QAqBb/B,GAAW,GArBE,4BAsBLX,EAAIiC,SAAuB,UAAZjC,EAAImC,IAtBd,4CAwBLQ,GAAU,CAAEC,KAAMtC,IAxBb,QAyBXgB,EAAM,CACJrB,MAAO,gBACPsC,YAAY,GAAD,OAAKjC,EAAKA,EAAKuC,OAAS,GAAxB,oBACXL,OAAQ,UACRC,SAAU,IACVC,YAAY,IA9BH,4EAkCX/B,GAAW,GAlCA,6CAoCL,uBAAuBmC,KAAK9C,EAAImC,KACpCzB,GAAkC,IAAvBG,EAAYgC,SACtBrC,IAASK,EAAY,GACtBkC,GAAIhB,IAEJtB,EAAQI,EAAY,IACpBF,GAAW,KAGK,UAAZX,EAAImC,KAA2B,KAARJ,EAC/BgB,GAAIhB,GACgB,cAAZ/B,EAAImC,KAA+B,KAARN,EACnCmB,GAAO1C,EAAKuC,OAAS,GACZ7C,EAAImC,MACb1B,EAAQoB,GACRf,GAAU,SAAAmC,GAAC,MAAK,CAAEL,KAAMK,EAAEL,KAAMM,OAAQrB,OAnD3B,iEAAH,sDAsDRkB,GAAM,SAACI,GACXxC,GAAW,GACXJ,GAAQ,SAAA6C,GACN,IAAMR,EAAI,wBAAOQ,GAAP,CAAWD,IAErB,OADArC,EAAU,CAAE8B,OAAMM,OAAQ,KACnBN,KAETnC,EAAQ,KAEJuC,GAAS,SAACzF,GACdoD,GAAW,GACXJ,GAAQ,SAAC6C,GACP,IAAMC,GAAO,aAAID,GAAIE,MAAM,EAAG/F,GAE9B,OADAuD,EAAU,CAAE8B,KAAMS,EAAMH,OAAQ1C,IACzB6C,MAGLV,GAAS,+CAAG,kKAChBC,EADgB,EAChBA,KADgB,IACVW,WADU,MACJ,KADI,MACEC,gBADF,MACa,KADb,EAGG,IAAhBZ,EAAKC,OAHQ,oDAKZtF,EAAIP,QAAQyB,IALA,sBAMd6C,EAAM,CACJrB,MAAO,sBACPsC,YAAa,6DACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,IAER,IAAIe,MAAM,iBAbF,cAeRC,EAAO,GAfC,UAgBMnG,EAAIoG,IAAI,WAASlF,GAhBvB,WAgBRwC,EAhBQ,OAkBR2C,EAAU,GACVC,EAnBQ,UAiBVC,EAAO7C,SAjBG,aAmBF,EAAO2B,EAAK,IACxBc,EAAKK,KAAKF,IACPG,QAAQH,GArBG,kCAsBCI,eAAaC,KAAK3G,EAAIP,QAAS6G,GAtBhC,QAsBZC,EAtBY,+BAwBIlB,EAAKU,MAAM,IAxBf,8DAwBJ9C,EAxBI,QAyBNqD,EAzBM,UAyBAC,SAzBA,iBAyBA,EAAMK,eAzBN,aAyBA,EAAgB3D,GAC5BkD,EAAKK,KAAKF,IACPG,QAAQH,GA3BC,wBA4BVD,EAAQG,KAAKD,GA5BH,UA6BGG,eAAaC,KAAK3G,EAAIP,QAAS6G,GA7BlC,QA6BVC,EA7BU,+MAmCRM,IAAQ,OAACnD,QAAD,IAACA,OAAD,EAACA,EAAQ2B,EAAK,KACtByB,EAAQD,EAAQ,EAAIR,EAAQf,OAAS,EAIrCyB,EACJ1B,EAAKU,MAAMiB,KAAKC,IAAI,EAAGH,GAAQzB,EAAKC,QAAQ4B,UAExCC,EAAW,IAEdnB,EA7CW,oBA8CRC,EA9CQ,uBA8CQ,IAAIC,MAAM,qBA9ClB,yBA+COQ,eAAaU,OAC9BpH,EAAIP,SADa,gBAEdwG,EAFc,iBAEOD,EAAIqB,aAC5B,CACEC,YAAa,CAACtH,EAAIP,QAAQyB,IAAIqG,IAC9BC,OAAQ,wBACRC,OAAQ3H,UAAK4H,QAAQC,aArDb,QA+CNC,EA/CM,OAwDZT,EAASX,KAAKoB,GAxDF,wBA2DIb,GA3DJ,kEA2DJ9D,EA3DI,kBA4DMyD,eAAaU,OAC7BpH,EAAIP,SADY,gBAEbwD,EAFa,oBAENkE,EAAS,UAFH,aAEN,EAAaI,GAAGM,eAFV,QAEqB,MACrC,CACEP,YAAa,CAACtH,EAAIP,QAAQyB,IAAIqG,IAC9BC,OAAQ,wBACRC,OAAQ3H,UAAK4H,QAAQC,aAlEb,QA4DNG,EA5DM,OAqEZX,EAASY,QAAQD,GArEL,qJAwEXjB,EAxEW,sBAyETR,EAAQf,OAAS,GAzER,uBA0EJ,IAAIY,MAAM,oCA1EN,yBA4ENlG,EAAIgI,MAAM,YAAV,gBACH3C,EAAK,GADF,oBACO8B,EAAS,UADhB,aACO,EAAaI,GAAGM,eADvB,QACkC,OA7E5B,qCA+EJf,EAAQzB,EAAKC,QA/ET,0BAgFKe,EAAQN,OAAO,GAhFpB,qBAgFLkC,EAhFK,KAiFNC,EAAQf,EAAS,GAjFX,UAkFUT,eAAaC,KACjC3G,EAAIP,QAASwI,EAAOrB,QAAQvB,EAAKyB,EAAQ,KAnF/B,eAkFNF,EAlFM,iBAsFNA,EAAQuB,QAAR,8BACDvB,EAAQA,SACRsB,EAAMtB,UAxFC,gCA2FZwB,QAAQC,KAAK,cA3FD,+EAAH,sDA+FTC,GAAM,+CAAG,WAAO7F,GAAP,kGACP8F,EAAQ9F,EAAI8B,OAAOgE,MACrBC,EAAO/F,EAAI8B,OAAOvC,MAEF,IAAjBuG,EAAMjD,OAJI,sBAKL,IAAIY,MAAM,uBALL,uBAQKqC,GARL,gEAQH/E,EARG,kBASSM,EAAK0B,IACvBhC,EACA,CACEiF,SAAU,SAACC,GAAD,OAAUN,QAAQC,KAAR,oBAA0BK,OAZvC,QASLC,EATK,SAeGH,EAAKI,MAAM,UAAU7C,OAAO,GAf/B,qBAeJ8C,EAfI,KAgBL5C,EAAW4C,EAEjBzD,GAAU,CACRC,KAAMtC,EAAMiD,IAAK2C,EAAM3C,IAAKC,aAnBnB,uMAAH,sDAkCZ,OAVA,IAAAnE,YAAU,WACRsB,GAAW,KACV,CAACE,KAEJ,IAAAxB,YAAU,WAAO,IAAD,KACd,OAAG9B,QAAH,IAAGA,GAAH,UAAGA,EAAKP,eAAR,iBAAG,EAAcyB,WAAjB,aAAG,EAAmBqG,KACpB7F,EAAO1B,EAAIP,QAAQyB,IAAIqG,MAExB,QAACvH,QAAD,IAACA,GAAD,UAACA,EAAKP,eAAN,iBAAC,EAAcyB,WAAf,aAAC,EAAmBqG,MAGrB,gCACGvH,EAAIP,QAAQyB,MACX,iCACE,SAAC,EAAA4H,QAAD,CAASC,UAAQ,EAACC,MAAM,aAAxB,UACE,SAAC,EAAA3G,OAAD,CACEC,SAAS,QAAQE,IAAI,OAAOD,MAAM,MAClCH,YAAY,SACZD,QAAS,kBAAMqB,EAAKyF,QAAQC,SAH9B,uBAQF,SAAC,EAAAC,MAAD,CACEC,KAAK,OAAOC,IAAK7F,EACjB8F,MAAO,CAAEC,QAAS,QAClBC,SAAUlB,SAIhB,SAAC,EAAAQ,QAAD,CAASC,UAAQ,EAACC,MAAM,WAAxB,UACE,SAAC,EAAA3G,OAAD,CACEC,SAAS,QAAQE,IAAI,OAAOD,MAAM,MAClCH,YAAY,OAAOqH,SAAU,GAAIC,GAAI,EACrCvH,QAASgC,GAHX,uBAQF,SAAC,UAAD,CAEID,UAAQE,WACRR,UAASC,aACTtE,aAAYC,gBAEdmK,cAAejG,KAEjB,SAAC,EAAAkG,KAAD,CAAMC,KAAK,oCAAX,UACE,SAAC,EAAAC,MAAD,CACEC,IAAKC,UAAS1H,SAAS,QACvB2H,QAAQ,MAAMC,OAAQ,EAAG3H,MAAO,OAGpC,UAAC,EAAA4H,IAAD,CAAKC,GAAG,OAAR,WACE,UAAC,EAAAC,WAAD,CAAYC,KAAK,QAAQC,EAAE,OAAOC,GAAI,EAAtC,WACE,SAAC,EAAAC,eAAD,CAAgBC,SAAS,MAAMhI,MAAM,8BACrC,SAAC,EAAAyG,MAAD,CACEwB,YAAa,EAAGC,UAAU,SAC1B5I,MAAOd,EAAKsI,SAAU,SAAA/G,GAAG,OAAIf,EAAOe,EAAI8B,OAAOvC,cAGnD,UAAC,EAAA6I,KAAD,CAAMC,QAAQ,SAASN,GAAI,EAA3B,UACGzH,EAAKgI,KAAI,SAACvG,EAAKxE,GAAN,OACR,UAAC,EAAAgL,IAAD,CACEC,KAAM,EAENC,QAAQ,QACR9I,YAAaS,EAAO7C,EAAM6C,EAAOyC,QACjC5C,MAAO8B,EACP4F,GAAI,EANN,WAQE,SAAC,EAAAe,SAAD,UAAW3G,KACX,SAAC,EAAA4G,eAAD,CAAgBjJ,QAAS,kBAAMsD,GAAOzF,UAP/B4C,OAUX,SAAC,EAAAuG,MAAD,CACEmB,KAAK,QAAQK,YAAa,EAC1BU,WAAS,EAACJ,KAAM,EAChBK,UAAWjH,GACXrC,MAAOiB,EAAMoG,IAAK3F,EAClB8F,SAAUnF,GACVkH,YAAY,+DAGd,WACA,GAAGpI,EACD,OACE,SAAC,EAAAgH,IAAD,CAAKqB,MAAM,SAAX,UACE,SAAC,EAAAC,QAAD,CAASC,KAAK,KAAKtJ,YAAY,OAAOmI,EAAE,OAAOC,GAAI,OAKzD,GAA0B,kBAAhBlH,EAA0B,CAClC,IAAIgD,EAAMhD,EACJqI,EACJrF,EAAIqF,MAAM,mBAKZ,OAHGA,IACDrF,EAAG,8BAA0BqF,EAAM,MAE9B,SAAC,EAAA7B,MAAD,CAAOC,IAAKzD,EAAKkE,GAAI,EAAGoB,KAAK,SAEtC,OAA0B,IAAvBtI,EAAYgC,QAEX,SAAC,EAAA6E,IAAD,CAAKK,GAAG,OAAR,UACE,SAAC,EAAAqB,KAAD,CACEjB,UAAU,SACVkB,WAAW,gBACXrC,SAAU,GAHZ,gDAWJ,UAAC,EAAAsC,MAAD,YACE,SAAC,EAAAC,MAAD,WAAO,SAAC,EAAAC,GAAD,WACL,SAAC,EAAAC,GAAD,wBAEF,SAAC,EAAAC,MAAD,UACG7I,EAAY8I,OAAOrB,KAAI,SAACsB,EAAKC,GAAN,OACtB,SAAC,EAAAL,GAAD,CAAYM,OAAQ,CAAEC,GAAI,aAA1B,UACE,SAAC,EAAAC,GAAD,CAAItK,QAAS,kBAAMqD,GAAI6G,IAAMK,OAAO,UAApC,SACGL,KAFIC,WAvCjB,W,uPC9TV,OACA,SACA,S,iBAE8B,SAAC,GAAa,IAAXpL,EAAU,EAAVA,IAAU,GACb,IAAA9B,UAAS,CACnCiG,KAAM,GAAIM,OAAQ,KAFqB,qBAClCgH,EADkC,KAC1BpJ,EAD0B,KAInCvD,GAAM,IAAA8C,YAAWnE,cAJkB,GAKb,IAAAS,UAAS,IALI,qBAKlCwN,EALkC,KAK1BC,EAL0B,KAOnCC,GAAc,IAAAC,cAAA,6BAAY,4GAC3B/M,EAD2B,iCAEXA,EAAIoG,IAAI,WAASlF,GAFN,OAExBqF,EAFwB,OAGtByG,EAAQzG,EAAO,CAACA,GAAQ,GAHF,gBAIVoG,EAAOtH,MAJG,4DAIlBpC,EAJkB,kBAKpBqD,EALoB,UAKdC,SALc,aAKd,EAAOtD,UALO,IAOvBqD,OAPuB,EAOvBA,EAAK2G,WAAW,eAPO,kCAStBvG,eAAaC,KAAK3G,EAAIP,QAAS6G,GATT,SAQxBC,EARwB,OAUtBK,UACMoG,EAAMxG,KAAKD,GAXK,oCAYhBD,QAZgB,IAYhBA,OAZgB,EAYhBA,EAAK2G,WAAW,YAZA,wBAaxBJ,EAAUvG,GAbc,sMAoBxBhD,EAAc,GACf0J,EAAM1H,OAAS,IAAMqH,EAAOtH,KAAKC,SAClChC,EAAc4J,OAAOC,KAAKH,EAAMA,EAAM1H,OAAS,IAC1B,KAAlBqH,EAAOhH,SACRrC,EAAcA,EAAY8J,QACxB,SAAA1H,GAAC,OAAIA,EAAE2H,SAASV,EAAOhH,aAI7BkH,EAAUvJ,GA7BkB,gEA+B7B,CAACqJ,EAAQ3M,EAAKkB,IAGjB,OAFA,IAAAY,YAAU,kBAAMgL,MAAe,CAACA,IAEzB,CAACF,EAAQrJ,K,iCC7ClB,OAAe,cAA0B,qC,uICAzC,SAMA,U,mBAGe,YAGR,IAFLW,EAEI,EAFJA,OAAQE,EAEJ,EAFIA,QAASuF,EAEb,EAFaA,cACjB/F,EACI,EADJA,QAASC,EACL,EADKA,WAAYtE,EACjB,EADiBA,WAAYC,EAC7B,EAD6BA,cAE3B8N,EAAU1O,UAAM6E,SADlB,GAEoB,IAAArE,UAASwE,GAF7B,qBAEGE,EAFH,KAESyJ,EAFT,QAG0B,IAAAnO,UAASG,GAHnC,qBAGGE,EAHH,KAGY+N,EAHZ,KAKJ,OACE,+BACE,UAAC,EAAAC,MAAD,CACEC,gBAAiBJ,EACX3D,gBACNzF,OAAQA,EACRE,QAASA,EAJX,WAME,SAAC,EAAAuJ,aAAD,KACA,UAAC,EAAAC,aAAD,YACE,SAAC,EAAAC,YAAD,CAAajD,UAAU,SAAvB,uCAGA,SAAC,EAAAkD,iBAAD,KACA,UAAC,EAAAC,UAAD,CAAWC,GAAI,EAAf,WACE,UAAC,EAAAC,YAAD,YACE,SAAC,EAAAC,UAAD,wBACA,SAAC,EAAA/E,MAAD,CACEE,IAAKiE,EAAS/B,YAAY,WAC1BvJ,MAAO8B,EACP0F,SAAU,SAAC/G,GAAD,OAAS8K,EAAQ9K,EAAI8B,OAAOvC,cAI1C,UAAC,EAAAiM,YAAD,CAAazD,GAAI,EAAjB,WACE,SAAC,EAAA0D,UAAD,2BACA,SAAC,EAAA/E,MAAD,CACEoC,YAAY,cAAcvJ,MAAOvC,EACjC+J,SAAU,SAAC/G,GAAD,OAAS+K,EAAW/K,EAAI8B,OAAOvC,iBAK/C,UAAC,EAAAmM,YAAD,YACE,SAAC,EAAA9L,OAAD,CACED,YAAY,OAAOgI,GAAI,EACvBjI,QAAS,WACP0B,EAAWC,GACXtE,EAAcC,GACd2E,KALJ,mBAUA,SAAC,EAAA/B,OAAD,CAAQF,QAASiC,EAAjB,iC,mGC7DZ,I,EAAwB,SAACgK,GACnBA,GAAeA,aAAuBC,UACxC,8BACCC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACvCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O","file":"static/js/main.ad5ebac2.chunk.js","sourcesContent":["import React from 'react'\n\nexport const IDXContext = React.createContext(null)\nIDXContext.displayName = 'IDX'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect'\nimport { Button, ChakraProvider } from '@chakra-ui/react'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { IDX } from '@ceramicstudio/idx'\nimport defs from './definitionIDs.json'\nimport Listing from './Listing'\nimport { IDXContext } from './IDXContext'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const [ceramicURI, setCeramicURI] = useState(\n    // process.env.REACT_APP_CERAMIC_URL ?? 'http://localhost:7007'\n    process.env.REACT_APP_CERAMIC_URI ?? 'https://ceramic-clay.3boxlabs.com'\n  )\n  const ceramic = useMemo(() => new Ceramic(ceramicURI), [ceramicURI])\n  const aliases = useMemo(() => ({ mïmis: defs.definitions.mïmis }), [])\n  const idx = useMemo(\n    () => new IDX({ ceramic, aliases }),\n    [aliases, ceramic]\n  )\n  const [addr, setAddr] = useState(null)\n  const [loggingIn, setLoggingIn] = useState(false)\n  const threeIdConnect = new ThreeIdConnect()\n  const setRedraw = useState(false)[1]\n\n  const connect = async () => {\n    const addresses = await (\n      window.ethereum.request({ method: 'eth_requestAccounts' })\n    )\n    const address = addresses[0]\n    setAddr(address)\n    const authProvider = (\n      new EthereumAuthProvider(window.ethereum, address)\n    )\n    await threeIdConnect.connect(authProvider)\n    const did = new DID({\n      provider: threeIdConnect.getDidProvider(),\n      resolver: ThreeIdResolver.getResolver(ceramic)\n    })\n    await did.authenticate()\n    ceramic.setDID(did)\n    setRedraw(d => !d) // force redraw\n  }\n  const disconnect = () => {\n    ceramic.setDID(undefined) // this doesn't work\n    setRedraw(d => !d) // force redraw\n  }\n\n  useEffect(\n    () => { setLoggingIn(false) },\n    [idx.ceramic.did],\n  )\n\n  return (\n    <IDXContext.Provider value={idx}>\n      <ChakraProvider>\n        {(() => {\n          const [text, onClick, colorScheme] = (\n            idx.ceramic.did\n            ? ( ['Disconnect', disconnect, \"red\"] )\n            : ( ['Connect', connect, \"green\"] )\n          )\n          return (\n            <Button\n              position=\"fixed\"\n              right={5} top={5}\n              {...{ colorScheme }}\n              onClick={(evt) => {\n                setLoggingIn(true)\n                onClick(evt)\n              }}\n              title={addr}\n              isDisabled={loggingIn}\n            >\n              {text}\n            </Button>\n          )\n        })()}\n        <Listing {...{ ceramicURI, setCeramicURI }}/>\n      </ChakraProvider>\n    </IDXContext.Provider>\n  )\n}","import {\n  Box, Button, Image, Input, InputGroup,\n  InputLeftAddon, Link, Spinner, Table,\n  Tag, TagCloseButton, TagLabel, Tbody, Td,\n  Text, Th, Thead, Tooltip, Tr, useDisclosure,\n  useToast, Wrap,\n} from '@chakra-ui/react'\nimport {\n  useContext, useEffect, useRef, useState\n} from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { useSuggestions } from './useSuggestions'\nimport { IDXContext } from './IDXContext'\nimport defs from './definitionIDs.json'\nimport octocat from './octocat.svg'\nimport Settings from './Settings'\n\nlet tagKey = 0\n\nconst colors = [\n  \"gray\", \"red\", \"orange\", \"yellow\", \"green\",\n  \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\",\n]\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({ ceramicURI, setCeramicURI }) => {\n  const idx = useContext(IDXContext)\n  const [tags, setTags] = useState([])\n  const [elem, setElem] = useState('')\n  const [did, setDID] = useState(\n    'did:3:bafyreifdypkct7falt5aqkeahfl552ktoxlyh7lmrf6pttlwnfseufh4fe'\n  )\n  const [loading, setLoading] = useState(true)\n  const [suggestions, setSearch] = useSuggestions({ did })\n  const file = useRef(null)\n  const entry = useRef(null)\n  const [ipfsURI, setIPFSURI] = useState(\n    process.env.REACT_APP_IPFS_URI ?? '/ip4/127.0.0.1/tcp/5001'\n  )\n  const ipfs = ipfsHttpClient(ipfsURI)\n  const toast = useToast()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const dispatch = async (evt) => {\n    const raw = evt.target.value\n    const tag = raw.trim()\n\n    setLoading(true)\n\n    if(evt.ctrlKey && evt.shiftKey && evt.key === 'Enter') {\n      if(window.confirm('Clear All Data‽')) {\n        if(!idx.ceramic.did) {\n          alert('¡Connect to Ceramic!')\n        } else {\n          await idx.set('mïmis', {})\n          toast({\n            title: 'Reset File Paths.',\n            description: 'The filesystem has been cleared.',\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          })\n        }\n      }\n      setLoading(false)\n    } else if(evt.ctrlKey && evt.key === 'Enter') {\n      try {\n        await writePath({ path: tags })\n        toast({\n          title: 'Created Path.',\n          description: `${tags[tags.length - 1]} has been added.`,\n          status: 'success',\n          duration: 5000,\n          isClosable: true,\n        })\n      } catch(e) {\n      } finally {\n        setLoading(false)\n      }\n    } else if(/^(Arrow)?(Right|Up)$/.test(evt.key)) {\n      if(!loading && suggestions.length === 1) {\n        if(elem === suggestions[0]) {\n          add(tag)\n        } else {\n          setElem(suggestions[0])\n          setLoading(false)\n        }\n      }\n    } else if(evt.key === 'Enter' && tag !== '') {\n      add(tag)\n    } else if(evt.key === 'Backspace' && raw === '') {\n      remove(tags.length - 1)\n    } else if(!evt.key) { // onChange, could easily be a separate function\n      setElem(raw)\n      setSearch(s => ({ path: s.path, string: raw }))\n    }\n  }\n  const add = (term) => {\n    setLoading(true)\n    setTags(ts => {\n      const path = [...ts, term]\n      setSearch({ path, string: '' })\n      return path\n    })\n    setElem('')\n  }\n  const remove = (idx) => {\n    setLoading(true)\n    setTags((ts) => {\n      const copy = [...ts].slice(0, idx)\n      setSearch({ path: copy, string: elem })\n      return copy\n    })\n  }\n  const writePath = async ({\n    path, cid = null, filename = null,\n  }) => {\n    if(path.length === 0) return\n\n    if(!idx.ceramic.did) {\n      toast({\n        title: 'Connect to Ceramic.',\n        description: 'Creating paths requires connecting to the Ceramic network.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      })\n      throw new Error('Not Connected')\n    } else {\n      const urls = []\n      const entry = await idx.get('mïmis', did)\n      let root = entry\n      const forward = []\n      const url = root?.[path[0]]\n      urls.push(url)\n      if(Boolean(url)) {\n        root = await TileDocument.load(idx.ceramic, url)\n      }\n      for(const elem of path.slice(1)) {\n        const url = root?.content?.[elem]\n        urls.push(url)\n        if(Boolean(url)) {\n          forward.push(root)\n          root = await TileDocument.load(idx.ceramic, url)\n        } else {\n          break\n        }\n      }\n\n      const isIDX = !entry?.[path[0]]\n      const found = isIDX ? 0 : forward.length + 1\n\n      // For the part of the path that doesn't exist, work back\n      // from the leaf defining nodes.\n      const nonexistent = (\n        path.slice(Math.max(1, found), path.length).reverse()\n      )\n      const backward = []\n\n      if(cid) {\n        if(!filename) throw new Error('Filename not set.')\n        const leaf = await TileDocument.create(\n          idx.ceramic,\n          { [filename]: `ipfs://${cid.toString()}` },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Content Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backward.push(leaf)\n      }\n\n      for(const elem of nonexistent) {\n        const doc = await TileDocument.create(\n          idx.ceramic,\n          { [elem]: backward[0]?.id.toUrl() ?? null },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Context Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backward.unshift(doc)\n      }\n\n      if(isIDX) { // this is a root entry\n        if(forward.length > 0) {\n          throw new Error(\"¿No Root, but Forward Walked?\")\n        }\n        await idx.merge('mïmis', {\n          [path[0]]: backward[0]?.id.toUrl() ?? null\n        })\n      } else if(found < path.length) {\n        const [parent] = forward.slice(-1)\n        const child = backward[0]\n        const content = await TileDocument.load(\n          idx.ceramic, parent.content[path[found - 1]]\n        )\n\n        await content.update({\n          ...content.content,\n          ...child.content,\n        })\n      } else {\n        console.info('No Changes')\n      }\n    }\n  }\n  const upload = async (evt) => {\n    const files = evt.target.files\n    let name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    for(const file of files) {\n      const added = await ipfs.add(\n        file,\n        {\n          progress: (prog) => console.info(`received: ${prog}`)\n        }\n      )\n      const [ext] = name.split(/[./\\\\]/).slice(-1)\n      const filename = ext\n      // added.size\n      writePath({\n        path: tags, cid: added.cid, filename\n      })\n    }\n  }\n\n  useEffect(() => {\n    setLoading(false)\n  }, [suggestions])\n\n  useEffect(() => {\n    if(idx?.ceramic?.did?.id) {\n      setDID(idx.ceramic.did.id)\n    }\n  }, [idx?.ceramic?.did?.id])\n\n  return (\n    <>\n      {idx.ceramic.did && (\n        <>\n          <Tooltip hasArrow label=\"Add A File\">\n            <Button\n              position=\"fixed\" top=\"25vh\" right=\"3vw\"\n              colorScheme=\"orange\"\n              onClick={() => file.current.click()}\n            >\n              ➕\n            </Button>\n          </Tooltip>\n          <Input\n            type=\"file\" ref={file}\n            style={{ display: 'none' }}\n            onChange={upload}\n          />\n        </>\n      )}\n      <Tooltip hasArrow label=\"Settings\">\n        <Button\n          position=\"fixed\" top=\"50vh\" right=\"3vw\"\n          colorScheme=\"teal\" fontSize={42} pt={1}\n          onClick={onOpen}\n        >\n          ⚙\n        </Button>\n      </Tooltip>\n      <Settings\n        {...{\n          isOpen, onClose,\n          ipfsURI, setIPFSURI,\n          ceramicURI, setCeramicURI,\n        }}\n        finalFocusRef={entry}\n      />\n      <Link href=\"//github.com/dysbulic/ceramic-fs/\">\n        <Image\n          src={octocat} position=\"fixed\"\n          boxSize=\"5vw\" bottom={0} right={6}\n        />\n      </Link>\n      <Box mr=\"10em\">\n        <InputGroup maxW=\"42rem\" m=\"auto\" mt={5}>\n          <InputLeftAddon children=\"DID\" title=\"Decentralized Identifier\" />\n          <Input\n            borderWidth={3} textAlign=\"center\"\n            value={did} onChange={evt => setDID(evt.target.value)}\n          />\n        </InputGroup>\n        <Wrap justify=\"center\" mt={5}>\n          {tags.map((tag, idx) => (\n            <Tag\n              grow={3}\n              key={++tagKey}\n              variant=\"solid\"\n              colorScheme={colors[idx % colors.length]}\n              title={tag}\n              mr={1}\n            >\n              <TagLabel>{tag}</TagLabel>\n              <TagCloseButton onClick={() => remove(idx)}/>\n            </Tag>\n          ))}\n          <Input\n            maxW=\"21rem\" borderWidth={3}\n            autoFocus grow={1}\n            onKeyDown={dispatch}\n            value={elem} ref={entry}\n            onChange={dispatch}\n            placeholder=\"^⏎ to create a path; →→ for autocomplete\"\n          />\n        </Wrap>\n        {(() => {\n          if(loading) {\n            return (\n              <Box align=\"center\">\n                <Spinner size=\"xl\" colorScheme=\"blue\" m=\"auto\" mt={40}/>\n              </Box>\n            )\n          }\n          // this is a hack & should be replaced\n          if(typeof suggestions === 'string') {\n            let url = suggestions\n            const match = (\n              url.match(/^ipfs:\\/\\/(.+)$/)\n            )\n            if(match) {\n              url = `http://ipfs.io/ipfs/${match[1]}`\n            }\n            return <Image src={url} mt={5} maxH=\"90vh\"/>\n          }\n          if(suggestions.length === 0) {\n            return (\n              <Box mt=\"30vh\">\n                <Text\n                  textAlign=\"center\"\n                  fontFamily=\"'Odibee Sans'\"\n                  fontSize={65}\n                >\n                  No path completions found…\n                </Text>\n              </Box>\n            )\n          }\n          return (\n            <Table>\n              <Thead><Tr>\n                <Th>Name</Th>\n              </Tr></Thead>\n              <Tbody>\n                {suggestions.sort().map((sug, i) => (\n                  <Tr key={i} _hover={{ bg: '#FFF70022' }}>\n                    <Td onClick={() => add(sug)} cursor=\"pointer\">\n                      {sug}\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          )\n        })()}\n      </Box>\n    </>\n  )\n}","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { IDXContext } from './IDXContext'\n\nexport const useSuggestions = ({ did }) => {\n  const [search, setSearch] = useState({\n    path: [], string: ''\n  })\n  const idx = useContext(IDXContext)\n  const [result, setResult] = useState([])\n\n  const dereference = useCallback(async () => {\n    if(idx) {\n      let root = await idx.get('mïmis', did)\n      const nodes = root ? [root] : []\n      for(const elem of search.path) {\n        const url = root?.[elem]\n\n        if(url?.startsWith('ceramic://')) {\n          root = (await\n            TileDocument.load(idx.ceramic, url)\n          ).content\n          root && nodes.push(root)\n        } else if(url?.startsWith('ipfs://')) {\n          setResult(url) // a leaf with content\n          return\n        } else {\n          break\n        }\n      }\n\n      let suggestions = []\n      if(nodes.length - 1 === search.path.length) {\n        suggestions = Object.keys(nodes[nodes.length - 1])\n        if(search.string !== '') {\n          suggestions = suggestions.filter(\n            s => s.includes(search.string)\n          )\n        }\n      }\n      setResult(suggestions)\n    }\n  }, [search, idx, did])\n  useEffect(() => dereference(), [dereference])\n\n  return [result, setSearch]\n}","export default __webpack_public_path__ + \"static/media/octocat.6986f28e.svg\";","import {\n  Button, FormControl, FormLabel, Input,\n  Modal, ModalBody, ModalCloseButton,\n  ModalContent, ModalFooter, ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n  isOpen, onClose, finalFocusRef,\n  ipfsURI, setIPFSURI, ceramicURI, setCeramicURI,\n}) => {\n  const ipfsRef = React.useRef()\n  const [ipfs, setIPFS] = useState(ipfsURI)\n  const [ceramic, setCeramic] = useState(ceramicURI)\n\n  return (\n    <>\n      <Modal\n        initialFocusRef={ipfsRef}\n        {...{ finalFocusRef }}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay/>\n        <ModalContent>\n          <ModalHeader textAlign=\"center\">\n            Configure Your Endpoints\n          </ModalHeader>\n          <ModalCloseButton/>\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>IPFS URI</FormLabel>\n              <Input\n                ref={ipfsRef} placeholder=\"IPFS URI\"\n                value={ipfs}\n                onChange={(evt) => setIPFS(evt.target.value)}\n              />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Ceramic URI</FormLabel>\n              <Input\n                placeholder=\"Ceramic URI\" value={ceramic}\n                onChange={(evt) => setCeramic(evt.target.value)}\n              />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              colorScheme=\"blue\" mr={3}\n              onClick={() => {\n                setIPFSURI(ipfs)\n                setCeramicURI(ceramic)\n                onClose()\n              }}\n            >\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n"],"sourceRoot":""}