{"version":3,"sources":["IDXContext.js","index.js","App.jsx","Listing.jsx","useSuggestions.js","octocat.svg","Settings.jsx","reportWebVitals.js"],"names":["IDXContext","React","createContext","displayName","ReactDOM","render","StrictMode","document","getElementById","useState","process","REACT_APP_CERAMIC_URI","ceramicURI","setCeramicURI","ceramic","useMemo","Ceramic","aliases","mïmis","defs","definitions","idx","IDX","threeIdConnect","ThreeIdConnect","setRedraw","connect","window","ethereum","request","method","addresses","address","authProvider","EthereumAuthProvider","did","DID","provider","getDidProvider","resolver","ThreeIdResolver","getResolver","authenticate","setDID","d","disconnect","undefined","Provider","value","ChakraProvider","text","onClick","colorScheme","Button","position","right","top","tagKey","colors","useContext","tags","setTags","elem","setElem","loading","setLoading","useSuggestions","suggestions","setSearch","file","useRef","entry","REACT_APP_IPFS_URI","ipfsURI","setIPFSURI","ipfs","toast","useToast","useDisclosure","isOpen","onOpen","onClose","dispatch","evt","raw","target","tag","trim","ctrlKey","shiftKey","key","confirm","alert","set","title","description","status","duration","isClosable","writePath","path","length","test","add","s","string","term","ts","cid","filename","Error","get","root","docs","url","content","Boolean","TileDocument","load","push","console","info","map","id","toUrl","found","nonexistent","slice","reverse","backwards","create","controllers","family","schema","schemas","Mïmis","doc","unshift","pl","dl","merge","update","toString","leaf","parent","p","c","commitId","upload","files","name","progress","prog","added","ext","split","useEffect","current","click","Input","type","ref","style","display","onChange","fontSize","pt","finalFocusRef","Link","href","Image","src","octocat","boxSize","bottom","Box","mr","InputGroup","maxW","m","mt","InputLeftAddon","children","borderWidth","textAlign","Wrap","justify","Tag","grow","variant","TagLabel","TagCloseButton","copy","remove","autoFocus","onKeyDown","align","Spinner","size","Text","fontFamily","Table","Thead","Tr","Th","Tbody","sort","sug","i","_hover","bg","Td","cursor","search","result","setResult","dereference","useCallback","nodes","Object","keys","filter","includes","ipfsRef","setIPFS","setCeramic","Modal","initialFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","pb","FormControl","FormLabel","placeholder","ModalFooter","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.eb2b1771.chunk.js","sourcesContent":["import React from 'react'\n\nexport const IDXContext = React.createContext(null)\nIDXContext.displayName = 'IDX'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect'\nimport { Button, ChakraProvider } from '@chakra-ui/react'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport React, { useMemo, useState } from 'react'\nimport { IDX } from '@ceramicstudio/idx'\nimport defs from './definitionIDs.json'\nimport Listing from './Listing'\nimport { IDXContext } from './IDXContext'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const [ceramicURI, setCeramicURI] = useState(\n    // process.env.REACT_APP_CERAMIC_URL ?? 'http://localhost:7007'\n    process.env.REACT_APP_CERAMIC_URI ?? 'https://ceramic-clay.3boxlabs.com'\n  )\n  const ceramic = useMemo(() => new Ceramic(ceramicURI), [ceramicURI])\n  const aliases = useMemo(() => ({ mïmis: defs.definitions.mïmis }), [])\n  const idx = useMemo(\n    () => new IDX({ ceramic, aliases }),\n    [aliases, ceramic]\n  )\n  const threeIdConnect = new ThreeIdConnect()\n  const setRedraw = useState(false)[1]\n\n  const connect = async () => {\n    const addresses = await (\n      window.ethereum.request({ method: 'eth_requestAccounts' })\n    )\n    const address = addresses[0]\n    const authProvider = (\n      new EthereumAuthProvider(window.ethereum, address)\n    )\n    await threeIdConnect.connect(authProvider)\n    const did = new DID({\n      provider: threeIdConnect.getDidProvider(),\n      resolver: ThreeIdResolver.getResolver(ceramic)\n    })\n    await did.authenticate()\n    ceramic.setDID(did)\n    setRedraw(d => !d) // force redraw\n  }\n  const disconnect = () => {\n    ceramic.setDID(undefined) // this doesn't work\n    setRedraw(d => !d) // force redraw\n  }\n\n  return (\n    <IDXContext.Provider value={idx}>\n      <ChakraProvider>\n        {(() => {\n          const [text, onClick, colorScheme] = (\n            idx.ceramic.did\n            ? ( ['Disconnect', disconnect, \"red\"] )\n            : ( ['Connect', connect, \"green\"] )\n          )\n          return (\n            <Button\n              position=\"fixed\"\n              right={5} top={5}\n              {...{ onClick, colorScheme }}\n            >\n              {text}\n            </Button>\n          )\n        })()}\n        <Listing {...{ ceramicURI, setCeramicURI }}/>\n      </ChakraProvider>\n    </IDXContext.Provider>\n  )\n}","import {\n  Box, Button, Image, Input, InputGroup,\n  InputLeftAddon, Link, Spinner, Table,\n  Tag, TagCloseButton, TagLabel, Tbody, Td,\n  Text, Th, Thead, Tr, useDisclosure,\n  useToast, Wrap,\n} from '@chakra-ui/react'\nimport {\n  useContext, useEffect, useRef, useState\n} from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { useSuggestions } from './useSuggestions'\nimport { IDXContext } from './IDXContext'\nimport defs from './definitionIDs.json'\nimport octocat from './octocat.svg'\nimport Settings from './Settings'\n\nlet tagKey = 0\n\nconst colors = [\n  \"gray\", \"red\", \"orange\", \"yellow\", \"green\",\n  \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\",\n]\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({ ceramicURI, setCeramicURI }) => {\n  const idx = useContext(IDXContext)\n  const [tags, setTags] = useState([])\n  const [elem, setElem] = useState('')\n  const [did, setDID] = useState(\n    'did:3:kjzl6cwe1jw147zr02h32lkdp666opzg0kp0sibzvumtn0z4k1wdxb6yb7ix4ie'\n  )\n  const [loading, setLoading] = useState(true)\n  const [suggestions, setSearch] = useSuggestions({ did })\n  const file = useRef(null)\n  const entry = useRef(null)\n  const [ipfsURI, setIPFSURI] = useState(\n    process.env.REACT_APP_IPFS_URI ?? '/ip4/127.0.0.1/tcp/5001'\n  )\n  const ipfs = ipfsHttpClient(ipfsURI)\n  const toast = useToast()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const dispatch = async (evt) => {\n    const raw = evt.target.value\n    const tag = raw.trim()\n\n    setLoading(true)\n\n    if(evt.ctrlKey && evt.shiftKey && evt.key === 'Enter') {\n      if(window.confirm('Clear All Data‽')) {\n        if(!idx.ceramic.did) {\n          alert('¡Connect to Ceramic!')\n        } else {\n          await idx.set('mïmis', {})\n          toast({\n            title: 'Reset File Paths.',\n            description: 'The filesystem has been cleared.',\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          })\n        }\n      }\n      setLoading(false)\n    } else if(evt.ctrlKey && evt.key === 'Enter') {\n      try {\n        await writePath({ path: tags })\n        toast({\n          title: 'Created Path.',\n          description: `${tags[tags.length - 1]} has been added.`,\n          status: 'success',\n          duration: 5000,\n          isClosable: true,\n        })\n      } catch(e) {\n      } finally {\n        setLoading(false)\n      }\n    } else if(/^(Arrow)?(Right|Up)$/.test(evt.key)) {\n      if(!loading && suggestions.length === 1) {\n        if(elem === suggestions[0]) {\n          add(tag)\n        } else {\n          setElem(suggestions[0])\n          setLoading(false)\n        }\n      }\n    } else if(evt.key === 'Enter' && tag !== '') {\n      add(tag)\n    } else if(!evt.key) { // onChange, could easily be a separate function\n      setElem(raw)\n      setSearch(s => ({ path: s.path, string: raw }))\n    }\n  }\n  const add = (term) => {\n    setLoading(true)\n    setTags(ts => {\n      const path = [...ts, term]\n      setSearch({ path, string: '' })\n      return path\n    })\n    setElem('')\n  }\n  const remove = (idx) => {\n    setLoading(true)\n    setTags((ts) => {\n      const copy = [...ts].slice(0, idx)\n      setSearch({ path: copy, string: elem })\n      return copy\n    })\n  }\n  const writePath = async ({\n    path, cid = null, filename = null,\n  }) => {\n    if(path.length === 0) return\n\n    if(!idx.ceramic.did) {\n      toast({\n        title: 'Connect to Ceramic.',\n        description: 'Creating paths requires connecting to the Ceramic network.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      })\n      throw new Error('Not Connected')\n    } else {\n      let root = await idx.get('mïmis', did)\n      const docs = []\n      for(const elem of path) {\n        const url = root?.[elem] ?? root?.content?.[elem]\n        if(Boolean(url)) {\n          root = await TileDocument.load(idx.ceramic, url)\n          docs.push(root)\n        } else {\n          break\n        }\n      }\n\n      console.info('FWD', { path }, docs.map(d => [d.id.toUrl(), d.content]))\n\n      const found = docs.length\n\n      // For the part of the path that doesn't exist, work back\n      // from the leaf defining nodes.\n      const nonexistent = (\n        path.slice(found + 1, path.length).reverse()\n      )\n      console.info('NON', nonexistent)\n      const backwards = []\n      for(const elem of nonexistent) {\n        console.info(\"BKWRD\", { found, backwards, elem })\n        const doc = await TileDocument.create(\n          idx.ceramic,\n          { [elem]: backwards[0]?.id.toUrl() ?? null },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Context Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backwards.unshift(doc)\n      }\n      // append the completed walk to the forward path\n      // for a complete route\n      docs.push(...backwards)\n\n      console.info(\n        \"DCKS\", docs.map(d => [d.id.toUrl(), d.content]),\n        { found, path, pl: path.length, dl: docs.length }\n      )\n\n      if(found === 0) { // this is a root entry\n        // this will overwrite entries, I'm pretty sure\n        console.info('ROOT', {\n          [path[0]]: docs[1]?.id.toUrl() ?? null\n        })\n        await idx.merge('mïmis', {\n          [path[0]]: docs[1]?.id.toUrl() ?? null\n        })\n      } else if(found + 1 < path.length) {\n        const doc = docs[found + 1]\n        console.info('CHAIN', {\n          ...(doc?.content ?? []),\n          [path[found + 1]]: (\n            docs[found + 2]?.id.toUrl() ?? null\n          ),\n        })\n        await doc.update({\n          ...doc.content,\n          [path[found + 1]]: (\n            docs[found + 2]?.id.toUrl() ?? null\n          ),\n        })\n      }\n\n      if(cid) {\n        if(!filename) throw new Error('Filename not set.')\n        const leaf = await TileDocument.create(\n          idx.ceramic,\n          { [filename]: `ipfs://${cid.toString()}` },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Content Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        const [parent] = docs.slice(-1)\n        console.info(\"DOC\", parent, {\n          ...parent.content,\n          [path.slice(-1)[0]]: leaf.id.toUrl(),\n        })\n        await parent.update({\n          ...parent.content,\n          [path.slice(-1)[0]]: leaf.id.toUrl(),\n        })\n        console.info(\n          { p: parent.id.toUrl(), c: parent.commitId.toUrl() }\n        )\n      }\n    }\n  }\n  const upload = async (evt) => {\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    for(const file of files) {\n      const added = await ipfs.add(\n        file,\n        {\n          progress: (prog) => console.info(`received: ${prog}`)\n        }\n      )\n      const ext = name.split('.').slice(-1)\n      const filename = `${ext}`\n      // added.size\n      writePath({\n        path: tags, cid: added.cid, filename\n      })\n    }\n  }\n\n  useEffect(() => {\n    setLoading(false)\n  }, [suggestions])\n\n  useEffect(() => {\n    if(idx?.ceramic?.did?.id) {\n      setDID(idx.ceramic.did.id)\n    }\n  }, [idx?.ceramic?.did?.id])\n\n  return (\n    <>\n      {idx.ceramic.did && (\n        <>\n          <Button\n            position=\"fixed\" top=\"25vh\" right=\"3vw\"\n            colorScheme=\"orange\"\n            onClick={() => file.current.click()}\n          >\n            ➕\n          </Button>\n          <Input\n            type=\"file\" ref={file}\n            style={{ display: 'none' }}\n            onChange={upload}\n          />\n        </>\n      )}\n      <Button\n        position=\"fixed\" top=\"50vh\" right=\"3vw\"\n        colorScheme=\"teal\" fontSize={42} pt={1}\n        onClick={onOpen}\n      >\n        ⚙\n      </Button>\n      <Settings\n        {...{\n          isOpen, onClose,\n          ipfsURI, setIPFSURI,\n          ceramicURI, setCeramicURI,\n        }}\n        finalFocusRef={entry}\n      />\n      <Link href=\"//github.com/dysbulic/ceramic-fs/\">\n        <Image\n          src={octocat} position=\"fixed\"\n          boxSize=\"5vw\" bottom={0} right={6}\n        />\n      </Link>\n      <Box mr=\"10em\">\n        <InputGroup maxW=\"42rem\" m=\"auto\" mt={5}>\n          <InputLeftAddon children=\"DID\" title=\"Decentralized Identifier\" />\n          <Input\n            borderWidth={3} textAlign=\"center\"\n            value={did} onChange={evt => setDID(evt.target.value)}\n          />\n        </InputGroup>\n        <Wrap justify=\"center\" mt={5}>\n          {tags.map((tag, idx) => (\n            <Tag\n              grow={3}\n              key={++tagKey}\n              variant=\"solid\"\n              colorScheme={colors[idx % colors.length]}\n              title={tag}\n              mr={1}\n            >\n              <TagLabel>{tag}</TagLabel>\n              <TagCloseButton onClick={() => remove(idx)}/>\n            </Tag>\n          ))}\n          <Input\n            maxW=\"20rem\" borderWidth={3}\n            autoFocus grow={1}\n            onKeyDown={dispatch}\n            value={elem} ref={entry}\n            onChange={dispatch}\n          />\n        </Wrap>\n        {(() => {\n          if(loading) {\n            return (\n              <Box align=\"center\">\n                <Spinner size=\"xl\" colorScheme=\"blue\" m=\"auto\" mt={40}/>\n              </Box>\n            )\n          }\n          if(suggestions.length === 0) {\n            return (\n              <Box mt=\"30vh\">\n                <Text\n                  textAlign=\"center\"\n                  fontFamily=\"'Odibee Sans'\"\n                  fontSize={65}\n                >\n                  No path completions found…\n                </Text>\n              </Box>\n            )\n          }\n          return (\n            <Table>\n              <Thead><Tr>\n                <Th>Name</Th>\n              </Tr></Thead>\n              <Tbody>\n                {suggestions.sort().map((sug, i) => (\n                  <Tr key={i} _hover={{ bg: '#FFF70022' }}>\n                    <Td onClick={() => add(sug)} cursor=\"pointer\">\n                      {sug}\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          )\n        })()}\n      </Box>\n    </>\n  )\n}","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { IDXContext } from './IDXContext'\n\nexport const useSuggestions = ({ did }) => {\n  const [search, setSearch] = useState({\n    path: [], string: ''\n  })\n  const idx = useContext(IDXContext)\n  const [result, setResult] = useState([])\n\n  const dereference = useCallback(async () => {\n    if(idx) {\n      let root = await idx.get('mïmis', did)\n      const nodes = root ? [root] : []\n      for(const elem of search.path) {\n        const url = root?.[elem]\n        if(Boolean(url)) {\n          root = (await TileDocument.load(idx.ceramic, url)).content\n          root && nodes.push(root)\n        } else {\n          break\n        }\n      }\n\n      let suggestions = []\n      if(nodes.length - 1 === search.path.length) {\n        suggestions = Object.keys(nodes[nodes.length - 1])\n        if(search.string !== '') {\n          suggestions = suggestions.filter(\n            s => s.includes(search.string)\n          )\n        }\n      }\n      setResult(suggestions)\n    }\n  }, [search, idx, did])\n  useEffect(() => dereference(), [dereference])\n\n  return [result, setSearch]\n}","export default __webpack_public_path__ + \"static/media/octocat.6986f28e.svg\";","import {\n  Button, FormControl, FormLabel, Input,\n  Modal, ModalBody, ModalCloseButton,\n  ModalContent, ModalFooter, ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n  isOpen, onClose, finalFocusRef,\n  ipfsURI, setIPFSURI, ceramicURI, setCeramicURI,\n}) => {\n  const ipfsRef = React.useRef()\n  const [ipfs, setIPFS] = useState(ipfsURI)\n  const [ceramic, setCeramic] = useState(ceramicURI)\n\n  return (\n    <>\n      <Modal\n        initialFocusRef={ipfsRef}\n        {...{ finalFocusRef }}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay/>\n        <ModalContent>\n          <ModalHeader>Configure Your Endpoints</ModalHeader>\n          <ModalCloseButton/>\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>IPFS URI</FormLabel>\n              <Input\n                ref={ipfsRef} placeholder=\"IPFS URI\"\n                value={ipfs}\n                onChange={(evt) => setIPFS(evt.target.value)}\n              />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Ceramic URI</FormLabel>\n              <Input\n                placeholder=\"Ceramic URI\" value={ceramic}\n                onChange={(evt) => setCeramic(evt.target.value)}\n              />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              colorScheme=\"blue\" mr={3}\n              onClick={() => {\n                setIPFSURI(ipfs)\n                setCeramicURI(ceramic)\n                onClose()\n              }}\n            >\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n"],"sourceRoot":""}