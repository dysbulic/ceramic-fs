{"version":3,"sources":["IDXContext.js","index.js","App.jsx","Listing.jsx","useSuggestions.js","reportWebVitals.js"],"names":["IDXContext","React","createContext","displayName","ReactDOM","render","StrictMode","document","getElementById","useState","process","REACT_APP_CERAMIC_URL","ceramicURL","ceramic","useMemo","Ceramic","aliases","mïmis","defs","definitions","idx","IDX","threeIdConnect","ThreeIdConnect","setRedraw","connect","window","ethereum","request","method","addresses","address","authProvider","EthereumAuthProvider","did","DID","provider","getDidProvider","resolver","ThreeIdResolver","getResolver","authenticate","setDID","d","disconnect","undefined","Provider","value","ChakraProvider","text","onClick","colorScheme","Button","position","right","top","tagKey","colors","useContext","tags","setTags","elem","setElem","loading","setLoading","useSuggestions","suggestions","setSearch","file","useRef","REACT_APP_IPFS_URI","ipfsURI","ipfs","toast","useToast","dispatch","evt","raw","target","tag","trim","ctrlKey","shiftKey","key","confirm","alert","set","title","description","status","duration","isClosable","writePath","path","length","test","add","s","string","term","ts","cid","filename","Error","get","root","docs","url","content","Boolean","TileDocument","load","push","found","nonexistent","slice","reverse","backwards","console","info","create","controllers","id","family","schema","schemas","Mïmis","doc","unshift","merge","toUrl","update","toString","upload","files","name","progress","prog","added","ext","split","useEffect","current","click","Input","type","ref","style","display","onChange","Stack","mr","InputGroup","maxW","m","mt","InputLeftAddon","children","borderWidth","textAlign","Wrap","justify","map","Tag","grow","variant","TagLabel","TagCloseButton","copy","remove","autoFocus","onKeyDown","Box","align","Spinner","size","Text","Table","Thead","Tr","Th","Tbody","sort","sug","i","_hover","bg","Td","cursor","search","result","setResult","dereference","useCallback","nodes","Object","keys","filter","includes","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.f76e7c7b.chunk.js","sourcesContent":["import React from 'react'\n\nexport const IDXContext = React.createContext(null)\nIDXContext.displayName = 'IDX'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect'\nimport { Button, ChakraProvider } from '@chakra-ui/react'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport React, { useMemo, useState } from 'react'\nimport { IDX } from '@ceramicstudio/idx'\nimport defs from './definitionIDs.json'\nimport Listing from './Listing'\nimport { IDXContext } from './IDXContext'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const [ceramicURL, setCeramicURL] = useState(\n    // process.env.REACT_APP_CERAMIC_URL ?? 'http://localhost:7007'\n    process.env.REACT_APP_CERAMIC_URL ?? 'https://ceramic-clay.3boxlabs.com'\n  )\n  const ceramic = useMemo(() => new Ceramic(ceramicURL), [ceramicURL])\n  const aliases = useMemo(() => ({ mïmis: defs.definitions.mïmis }), [])\n  const idx = useMemo(\n    () => new IDX({ ceramic, aliases }),\n    [aliases, ceramic]\n  )\n  const threeIdConnect = new ThreeIdConnect()\n  const setRedraw = useState(false)[1]\n\n  const connect = async () => {\n    const addresses = await (\n      window.ethereum.request({ method: 'eth_requestAccounts' })\n    )\n    const address = addresses[0]\n    const authProvider = (\n      new EthereumAuthProvider(window.ethereum, address)\n    )\n    await threeIdConnect.connect(authProvider)\n    const did = new DID({\n      provider: threeIdConnect.getDidProvider(),\n      resolver: ThreeIdResolver.getResolver(ceramic)\n    })\n    await did.authenticate()\n    ceramic.setDID(did)\n    setRedraw(d => !d) // force redraw\n  }\n  const disconnect = () => {\n    ceramic.setDID(undefined) // this doesn't work\n    setRedraw(d => !d) // force redraw\n  }\n\n  return (\n    <IDXContext.Provider value={idx}>\n      <ChakraProvider>\n        {(() => {\n          const [text, onClick, colorScheme] = (\n            idx.ceramic.did\n            ? ( ['Disconnect', disconnect, \"red\"] )\n            : ( ['Connect', connect, \"green\"] )\n          )\n          return (\n            <Button\n              position=\"fixed\"\n              right={5} top={5}\n              {...{ onClick, colorScheme }}\n            >\n              {text}\n            </Button>\n          )\n        })()}\n        <Listing/>\n      </ChakraProvider>\n    </IDXContext.Provider>\n  )\n}","import {\n  Box,\n  Button,\n  Input, InputGroup, InputLeftAddon, Spinner, Stack, Table, Tag, TagCloseButton, TagLabel,\n  Tbody, Td, Text, Th, Thead, Tr, useToast, Wrap,\n} from '@chakra-ui/react'\nimport { useContext, useEffect, useRef, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { useSuggestions } from './useSuggestions'\nimport { IDXContext } from './IDXContext'\nimport defs from './definitionIDs.json'\n\nlet tagKey = 0\n\nconst colors = [\n  \"gray\", \"red\", \"orange\", \"yellow\", \"green\",\n  \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\",\n]\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const idx = useContext(IDXContext)\n  const [tags, setTags] = useState([])\n  const [elem, setElem] = useState('')\n  const [did, setDID] = useState(\n    'did:3:kjzl6cwe1jw147zr02h32lkdp666opzg0kp0sibzvumtn0z4k1wdxb6yb7ix4ie'\n  )\n  const [loading, setLoading] = useState(true)\n  const [suggestions, setSearch] = useSuggestions({ did })\n  const file = useRef(null)\n  const [ipfsURI, setIPFSURI] = useState(\n    process.env.REACT_APP_IPFS_URI ?? '/ip4/127.0.0.1/tcp/5001'\n  )\n  const ipfs = ipfsHttpClient(ipfsURI)\n  const toast = useToast()\n\n  const dispatch = async (evt) => {\n    const raw = evt.target.value\n    const tag = raw.trim()\n\n    setLoading(true)\n\n    if(evt.ctrlKey && evt.shiftKey && evt.key === 'Enter') {\n      if(window.confirm('Clear All Data‽')) {\n        if(!idx.ceramic.did) {\n          alert('¡Connect to Ceramic!')\n        } else {\n          await idx.set('mïmis', {})\n          toast({\n            title: 'Reset File Paths.',\n            description: 'The filesystem has been cleared.',\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          })\n        }\n      }\n      setLoading(false)\n    } else if(evt.ctrlKey && evt.key === 'Enter') {\n      try {\n        await writePath({ path: tags })\n        toast({\n          title: 'Created Path.',\n          description: `${tags[tags.length - 1]} has been added.`,\n          status: 'success',\n          duration: 5000,\n          isClosable: true,\n        })\n      } catch(e) {\n      } finally {\n        setLoading(false)\n      }\n    } else if(/^(Arrow)?(Right|Up)$/.test(evt.key)) {\n      if(suggestions.length === 1) {\n        setElem(suggestions[0])\n      }\n    } else if(evt.key === 'Enter' && tag !== '') {\n      add(tag)\n    } else if(!evt.key) { // onChange, could easily be a separate function\n      setElem(raw)\n      setSearch(s => ({ path: s.path, string: raw }))\n    }\n  }\n  const add = (term) => {\n    setLoading(true)\n    setTags(ts => {\n      const path = [...ts, term]\n      setSearch({ path, string: '' })\n      return path\n    })\n    setElem('')\n  }\n  const remove = (idx) => {\n    setLoading(true)\n    setTags((ts) => {\n      const copy = [...ts].slice(0, idx)\n      setSearch({ path: copy, string: elem })\n      return copy\n    })\n  }\n  const writePath = async ({\n    path, cid = null, filename = null,\n  }) => {\n    if(path.length === 0) return\n\n    if(!idx.ceramic.did) {\n      toast({\n        title: 'Connect to Ceramic.',\n        description: 'Creating paths requires connecting to the Ceramic network.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      })\n      throw new Error('Not Connected')\n    } else {\n      let root = await idx.get('mïmis', did)\n      const docs = []\n      for(const elem of path) {\n        const url = root?.[elem] ?? root?.content?.[elem]\n        if(Boolean(url)) {\n          root = await TileDocument.load(idx.ceramic, url)\n          docs.push(root)\n        } else {\n          break\n        }\n      }\n\n      const found = docs.length\n\n      // For the part of the path that doesn't exist, work back\n      // from the leaf defining nodes.\n      const nonexistent = (\n        path.slice(found, path.length).reverse()\n      )\n      const backwards = []\n      for(const elem of nonexistent) {\n        console.info(\"BKWRD\", { backwards, elem })\n        const doc = await TileDocument.create(\n          idx.ceramic,\n          { [elem]: backwards[0] ?? null },\n          {\n            controllers: [idx.ceramic.did.id],\n            family: 'Mïmis Node',\n            schema: defs.schemas.Mïmis,\n          }\n        )\n        backwards.unshift(doc)\n      }\n      // append the completed walk to the forward path\n      // for a complete route\n      docs.push(...backwards)\n\n      if(found === 0) { // this is a root entry\n        if(docs.length > 2) {\n          await idx.merge('mïmis', {\n            [path[0]]: docs[1].id.toUrl()\n          })\n        }\n      } else {\n        const doc = docs[found]\n        await doc.update({\n          ...doc.content,\n          [path[found]]: (\n            docs[found + 1]?.id.toUrl() ?? null\n          ),\n        })\n      }\n\n      if(cid) {\n        if(!filename) throw new Error('Filename not set.')\n        const doc = docs.slice(-1)\n        await doc.update({\n          ...doc.content,\n          [filename]: `ipfs://${cid.toString()}`\n        })\n      }\n    }\n  }\n  const upload = async (evt) => {\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    for(const file of files) {\n      const added = await ipfs.add(\n        file,\n        {\n          progress: (prog) => console.info(`received: ${prog}`)\n        }\n      )\n      const ext = name.split('.').slice(-1)\n      const filename = `${ext}`\n      // added.size\n      writePath({\n        path: tags, cid: added.cid, filename\n      })\n    }\n  }\n\n  useEffect(() => {\n    setLoading(false)\n  }, [suggestions])\n\n  useEffect(() => {\n    if(idx?.ceramic?.did?.id) {\n      setDID(idx.ceramic.did.id)\n    }\n  }, [idx?.ceramic?.did?.id])\n\n  return (\n    <>\n      {idx.ceramic.did && (\n        <>\n          <Button\n            position=\"fixed\" top={20} right={10}\n            colorScheme=\"orange\"\n            onClick={() => file.current.click()}\n          >\n            ➕\n          </Button>\n          <Input\n            type=\"file\" ref={file}\n            style={{ display: 'none' }}\n            onChange={upload}\n          />\n        </>\n      )}\n      <Stack mr=\"10em\">\n        <InputGroup maxW=\"42rem\" m=\"auto\" mt={5}>\n          <InputLeftAddon children=\"DID\" title=\"Decentralized Identifier\" />\n          <Input\n            borderWidth={3} textAlign=\"center\"\n            value={did} onChange={evt => setDID(evt.target.value)}\n          />\n        </InputGroup>\n        <Wrap justify=\"center\" mt={5}>\n          {tags.map((tag, idx) => (\n            <Tag\n              grow={3}\n              key={++tagKey}\n              variant=\"solid\"\n              colorScheme={colors[idx % colors.length]}\n              title={tag}\n              mr={1}\n            >\n              <TagLabel>{tag}</TagLabel>\n              <TagCloseButton onClick={() => remove(idx)}/>\n            </Tag>\n          ))}\n          <Input\n            maxW=\"20rem\" borderWidth={3}\n            autoFocus grow={1}\n            onKeyDown={dispatch}\n            value={elem}\n            onChange={dispatch}\n          />\n        </Wrap>\n        {(() => {\n          if(loading) {\n            return (\n              <Box align=\"center\">\n                <Spinner size=\"xl\" colorScheme=\"blue\" m=\"auto\" mt={40}/>\n              </Box>\n            )\n          }\n          if(suggestions.length === 0) {\n            return (\n              <Text textAlign=\"center\">\n                No path completions found…\n              </Text>\n            )\n          }\n          return (\n            <Table>\n              <Thead><Tr>\n                <Th>Name</Th>\n              </Tr></Thead>\n              <Tbody>\n                {suggestions.sort().map((sug, i) => (\n                  <Tr key={i} _hover={{ bg: '#FFF70022' }}>\n                    <Td onClick={() => add(sug)} cursor=\"pointer\">\n                      {sug}\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          )\n        })()}\n      </Stack>\n    </>\n  )\n}","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { IDXContext } from './IDXContext'\n\nexport const useSuggestions = ({ did }) => {\n  const [search, setSearch] = useState({\n    path: [], string: ''\n  })\n  const idx = useContext(IDXContext)\n  const [result, setResult] = useState([])\n\n  const dereference = useCallback(async () => {\n    if(idx) {\n      let root = await idx.get('mïmis', did)\n      const nodes = root ? [root] : []\n      for(const elem of search.path) {\n        const url = root?.[elem]\n        if(Boolean(url)) {\n          root = (await TileDocument.load(idx.ceramic, url)).content\n          root && nodes.push(root)\n        } else {\n          break\n        }\n      }\n\n      let suggestions = []\n      if(nodes.length - 1 === search.path.length) {\n        suggestions = Object.keys(nodes[nodes.length - 1])\n        if(search.string !== '') {\n          suggestions = suggestions.filter(\n            s => s.includes(search.string)\n          )\n        }\n      }\n      setResult(suggestions)\n    }\n  }, [search, idx, did])\n  useEffect(() => dereference(), [dereference])\n\n  return [result, setSearch]\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n"],"sourceRoot":""}